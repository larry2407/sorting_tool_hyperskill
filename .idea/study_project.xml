<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="16" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <HyperskillCourse>
          <option name="authors">
            <list />
          </option>
          <option name="courseMode" value="Study" />
          <option name="customPresentableName" />
          <option name="description" value="As weâ€™re embracing Information Age, data becomes so abundant that processing it is no easy business. Names and numbers: how does one make sense of them? In this project, you will be writing a program that processes textual and numeric data and sorts it nicely. Make it a truly talented program: enable it to determine the biggest or most frequent pieces of data and perform necessary calculations. Data is waiting to be sorted!&lt;br/&gt;&lt;br/&gt;Learn more at &lt;a href=&quot;https://hyperskill.org&quot;&gt;https://hyperskill.org/projects/45&lt;/a&gt;" />
          <option name="environment" value="" />
          <option name="id" value="0" />
          <option name="index" value="-1" />
          <option name="language" value="JAVA 11" />
          <option name="languageCode" value="en" />
          <option name="name" value="Sorting Tool" />
          <option name="stages">
            <list>
              <HyperskillStage>
                <option name="id" value="239" />
                <option name="stepId" value="5613" />
                <option name="title" value="Numbers only" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="240" />
                <option name="stepId" value="5382" />
                <option name="title" value="Not only numbers" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="241" />
                <option name="stepId" value="5383" />
                <option name="title" value="Sorting it out" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="242" />
                <option name="stepId" value="5384" />
                <option name="title" value="Everything counts" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="243" />
                <option name="stepId" value="5385" />
                <option name="title" value="Error!" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="244" />
                <option name="stepId" value="5386" />
                <option name="title" value="X-files" />
              </HyperskillStage>
            </list>
          </option>
          <option name="taskToTopics">
            <map>
              <entry key="0">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="480" />
                      <option name="theoryId" value="6577" />
                      <option name="title" value="Command line overview" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="259" />
                      <option name="theoryId" value="3805" />
                      <option name="title" value="IDE" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="15" />
                      <option name="theoryId" value="3500" />
                      <option name="title" value="Introduction to Java" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="147" />
                      <option name="theoryId" value="3522" />
                      <option name="title" value="Basic literals" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="148" />
                      <option name="theoryId" value="3521" />
                      <option name="title" value="The first program" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="193" />
                      <option name="theoryId" value="3749" />
                      <option name="title" value="Printing data" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="14" />
                      <option name="theoryId" value="3518" />
                      <option name="title" value="Types and variables" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="30" />
                      <option name="theoryId" value="3520" />
                      <option name="title" value="Comments" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="112" />
                      <option name="theoryId" value="3513" />
                      <option name="title" value="Naming variables" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="146" />
                      <option name="theoryId" value="3519" />
                      <option name="title" value="Arithmetic operations" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="191" />
                      <option name="theoryId" value="3739" />
                      <option name="title" value="Write, compile and run" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="149" />
                      <option name="theoryId" value="3499" />
                      <option name="title" value="JVM, JRE and JDK" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="192" />
                      <option name="theoryId" value="3746" />
                      <option name="title" value="Running programs on your computer" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="113" />
                      <option name="theoryId" value="3603" />
                      <option name="title" value="Scanning the input" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="27" />
                      <option name="theoryId" value="3565" />
                      <option name="title" value="Integer types and operations" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="87" />
                      <option name="theoryId" value="3516" />
                      <option name="title" value="Boolean and logical operations" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="88" />
                      <option name="theoryId" value="3512" />
                      <option name="title" value="Relational operators" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="307" />
                      <option name="theoryId" value="5008" />
                      <option name="title" value="Increment and decrement" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="25" />
                      <option name="theoryId" value="3503" />
                      <option name="title" value="Conditional statement" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="89" />
                      <option name="theoryId" value="3505" />
                      <option name="title" value="The for-loop" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="1">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="502" />
                      <option name="theoryId" value="6865" />
                      <option name="title" value="Units of information" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="362" />
                      <option name="theoryId" value="5544" />
                      <option name="title" value="Binary numbers" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="309" />
                      <option name="theoryId" value="5035" />
                      <option name="title" value="Primitive and reference types" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="4" />
                      <option name="theoryId" value="3511" />
                      <option name="title" value="Array" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="161" />
                      <option name="theoryId" value="3532" />
                      <option name="title" value="Sizes and ranges" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="32" />
                      <option name="theoryId" value="3510" />
                      <option name="title" value="Type casting" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="36" />
                      <option name="theoryId" value="3517" />
                      <option name="title" value="Floating-point types" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="31" />
                      <option name="theoryId" value="3514" />
                      <option name="title" value="Characters" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="9" />
                      <option name="theoryId" value="3523" />
                      <option name="title" value="String" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="98" />
                      <option name="theoryId" value="3551" />
                      <option name="title" value="Processing strings" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="94" />
                      <option name="theoryId" value="3590" />
                      <option name="title" value="Defining methods" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="1" />
                      <option name="theoryId" value="3489" />
                      <option name="title" value="The main method" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="99" />
                      <option name="theoryId" value="3594" />
                      <option name="title" value="Arrays as parameters" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="111" />
                      <option name="theoryId" value="3566" />
                      <option name="title" value="Command-line arguments" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="2">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="117" />
                      <option name="theoryId" value="3614" />
                      <option name="title" value="Introduction to OOP" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="266" />
                      <option name="theoryId" value="4953" />
                      <option name="title" value="Computer algorithms" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="263" />
                      <option name="theoryId" value="4991" />
                      <option name="title" value="The big O notation" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="267" />
                      <option name="theoryId" value="5161" />
                      <option name="title" value="Data structures" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="410" />
                      <option name="theoryId" value="5984" />
                      <option name="title" value="Recursion basics" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="274" />
                      <option name="theoryId" value="4954" />
                      <option name="title" value="The sorting problem" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="273" />
                      <option name="theoryId" value="4964" />
                      <option name="title" value="Merge sort" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="346" />
                      <option name="theoryId" value="5357" />
                      <option name="title" value="Dynamic array" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="60" />
                      <option name="theoryId" value="3497" />
                      <option name="title" value="What is an exception" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="164" />
                      <option name="theoryId" value="1945" />
                      <option name="title" value="NPE" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="130" />
                      <option name="theoryId" value="3540" />
                      <option name="title" value="Algorithms in Java" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="143" />
                      <option name="theoryId" value="3527" />
                      <option name="title" value="Merge sort in Java" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="167" />
                      <option name="theoryId" value="3492" />
                      <option name="title" value="Generic programming" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="166" />
                      <option name="theoryId" value="3567" />
                      <option name="title" value="ArrayList" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="163" />
                      <option name="theoryId" value="3536" />
                      <option name="title" value="Errors in programs" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="152" />
                      <option name="theoryId" value="3506" />
                      <option name="title" value="Ternary operator" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="97" />
                      <option name="theoryId" value="3602" />
                      <option name="title" value="Iterating over arrays" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="115" />
                      <option name="theoryId" value="3618" />
                      <option name="title" value="Defining classes" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="17" />
                      <option name="theoryId" value="3535" />
                      <option name="title" value="Constructor" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="96" />
                      <option name="theoryId" value="4727" />
                      <option name="title" value="Objects" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="3">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="43" />
                      <option name="theoryId" value="3591" />
                      <option name="title" value="Basics of collections" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="40" />
                      <option name="theoryId" value="3575" />
                      <option name="title" value="Set" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="46" />
                      <option name="theoryId" value="3558" />
                      <option name="title" value="Map" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="4">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="59" />
                      <option name="theoryId" value="3570" />
                      <option name="title" value="Hierarchy of exceptions" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="65" />
                      <option name="theoryId" value="3552" />
                      <option name="title" value="Exception handling" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="7" />
                      <option name="theoryId" value="3621" />
                      <option name="title" value="Package" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="28" />
                      <option name="theoryId" value="3589" />
                      <option name="title" value="Access modifiers" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="24" />
                      <option name="theoryId" value="3599" />
                      <option name="title" value="Getters and setters" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="8" />
                      <option name="theoryId" value="3583" />
                      <option name="title" value="Inheritance" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="5">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="172" />
                      <option name="theoryId" value="3635" />
                      <option name="title" value="Files" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="173" />
                      <option name="theoryId" value="3636" />
                      <option name="title" value="Reading files" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="177" />
                      <option name="theoryId" value="3652" />
                      <option name="title" value="Writing files" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
            </map>
          </option>
          <option name="updateDate" value="0" />
          <option name="hyperskillProject">
            <HyperskillProject>
              <option name="description" value="As weâ€™re embracing Information Age, data becomes so abundant that processing it is no easy business. Names and numbers: how does one make sense of them? In this project, you will be writing a program that processes textual and numeric data and sorts it nicely. Make it a truly talented program: enable it to determine the biggest or most frequent pieces of data and perform necessary calculations. Data is waiting to be sorted!" />
              <option name="id" value="45" />
              <option name="ideFiles" value="https://stepik.org/media/attachments/lesson/209824/additional_files.json" />
              <option name="language" value="java" />
              <option name="templateBased" value="false" />
              <option name="title" value="Sorting Tool" />
              <option name="useIde" value="true" />
            </HyperskillProject>
          </option>
          <option name="items">
            <list>
              <FrameworkLesson>
                <option name="currentTaskIndex" value="5" />
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="1" />
                <option name="name" value="Sorting Tool" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;This project is about sorting different data. Numbers, words, lines.&lt;/p&gt;&#10;&#10;&lt;p&gt;In the first stage, let's stick to integers only. The program should read integers from the console. Note, that every line of input can contain multiple numbers - and these numbers can be separated not only by a single space but let's say 20 spaces.Â &lt;/p&gt;&#10;&#10;&lt;p&gt;Your program should process every line the user inputs. To end the input, the user shouldÂ typeÂ &lt;code&gt;Ctrl+D&lt;/code&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;Notice that if you run your program and try to manually type numbers you realize that this process will go on infinitely. And by pressing &lt;code&gt;Ctrl+D&lt;/code&gt; you say to the program that you won't type any more symbols to the standard input. And in this case,Â &lt;code&gt;scanner.hasNext...&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt;. So, you don't need to check specifically for &lt;code&gt;Ctrl+D&lt;/code&gt; to be typed.&lt;/p&gt;&#10;&#10;&lt;p&gt;After the end of the input, your program should output three things:&lt;/p&gt;&#10;&#10;&lt;ol&gt;&#10;&#9;&lt;li&gt;The number of numbers in the inputÂ  (X)&lt;/li&gt;&#10;&#9;&lt;li&gt;The greatest number in the input (Y)&lt;/li&gt;&#10;&#9;&lt;li&gt;How many times this greatest number occurs in the input (Z)&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&#10;&lt;p&gt;You should paste these numbers in the following template:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Total numbers: X.&#10;The greatest number: Y (Z time(s)).&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Input example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;1 -2   33 4&#10;42&#10;1                 1&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Total numbers: 7.&#10;The greatest number: 42 (1 time(s)).&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/45/stages/239/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5613" />
                      <option name="index" value="1" />
                      <option name="name" value="Numbers only" />
                      <option name="record" value="1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/sorting/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/sorting/Main.java" />
                                <option name="text" value="package sorting;&#10;&#10;import java.util.*;&#10;&#10;public class Main {&#10;    public static void main(final String[] args) {&#10;        Scanner scanner = new Scanner(System.in);&#10;&#10;        while (scanner.hasNextLong()) {&#10;            long number = scanner.nextLong();&#10;            // write your code here&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/SortingTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/SortingTest.java" />
                                <option name="text" value="import common.SortingToolStage1Test;&#10;&#10;public class SortingTest extends SortingToolStage1Test {&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/SortingToolStage1Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/SortingToolStage1Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest&#10;import org.hyperskill.hstest.v5.testcase.CheckResult&#10;import org.hyperskill.hstest.v5.testcase.TestCase&#10;import sorting.Main&#10;import java.util.*&#10;&#10;abstract class SortingToolStage1Test : BaseStageTest&lt;SortingToolClue&gt;(Main::class.java) {&#10;&#10;    override fun generate(): List&lt;TestCase&lt;SortingToolClue&gt;&gt; {&#10;        return stage1Tests()&#10;    }&#10;&#10;    override fun check(reply: String, clue: SortingToolClue): CheckResult {&#10;        return checkForLong(clue, reply)&#10;    }&#10;}&#10;&#10;fun stage1Tests(): List&lt;TestCase&lt;SortingToolClue&gt;&gt; {&#10;    return listOf(&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   33 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true&#10;            ),&#10;            createTest(&quot;1 2 2 3 4 5 5&quot;, true),&#10;            createTest(&quot;1 1 2 2 3 4 4 4&quot;, false)&#10;    )&#10;}&#10;&#10;&#10;fun revealRawTest(clue: SortingToolClue, reply: String): String {&#10;    return with(clue) { &quot;Args:\n${args.joinToString(&quot; &quot;)}\nInput:\n$consoleInput\nYour output:\n$reply\n\n&quot; }&#10;}&#10;&#10;class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List&lt;String&gt;)&#10;&#10;fun createTest(&#10;        consoleInput: String,&#10;        revealTest: Boolean,&#10;        vararg args: String = arrayOf(&quot;-dataType&quot;, &quot;long&quot;)&#10;): TestCase&lt;SortingToolClue&gt; {&#10;    return TestCase&lt;SortingToolClue&gt;()&#10;            .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))&#10;            .setInput(consoleInput)&#10;            .addArguments(*args)&#10;}&#10;&#10;fun checkForLong(clue: SortingToolClue, reply_: String): CheckResult {&#10;    val reply = reply_.trim()&#10;    val regex = &quot;&quot;&quot;(\d+)\D+(\d+)\D+(\d+)&quot;&quot;&quot;.toRegex()&#10;    val matchResult = regex.find(reply)&#10;    if (matchResult == null) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Can't parse your output. Please check if your output contains three numbers\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Can't parse your output.&quot;)&#10;        }&#10;    }&#10;&#10;    val (totalNumbers, greatestNumber, greatestNumberCount) = matchResult.groupValues.drop(1).map { it.toInt() }&#10;&#10;    val scanner = Scanner(clue.consoleInput)&#10;&#10;    val actualNumbers = mutableListOf&lt;Int&gt;()&#10;&#10;    while (scanner.hasNextInt()) {&#10;        actualNumbers.add(scanner.nextInt())&#10;    }&#10;&#10;    val actualTotal = actualNumbers.size&#10;&#10;    if (actualTotal != totalNumbers) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Total numbers ($totalNumbers) are incorrect. Expected: $actualTotal.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Total numbers are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val actualMax = actualNumbers.max()&#10;&#10;    if (actualMax != greatestNumber) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Greatest number ($greatestNumber) is incorrect. Expected: $actualMax.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Greatest number is incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val actualMaxCount = actualNumbers.count { it == actualMax }&#10;&#10;    if (actualMaxCount != greatestNumberCount) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Greatest number times ($greatestNumberCount) are incorrect. Expected: $actualMaxCount.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Greatest number times are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    return CheckResult(true)&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1563030678000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage, you should implement command-line argumentsÂ parsing. Parse the &lt;code&gt;-dataType&lt;/code&gt; argument and it's following type. The type can be only &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;line&lt;/code&gt;Â or &lt;code&gt;word&lt;/code&gt;. If the argument is not provided, you should assume that &lt;code&gt;-dataType&lt;/code&gt; argument is &lt;code&gt;word&lt;/code&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;After that, you must treat all the user inputs as numbers, words or lines depending on command-line argument that was passed to the program.&lt;/p&gt;&#10;&#10;&lt;p&gt;If the argument is &lt;code&gt;word&lt;/code&gt;, the program should separate all the user input into words separated by spaces. You should compare words by length and in case two words have the same length - lexicographically.&lt;/p&gt;&#10;&#10;&lt;p&gt;If the argument is &lt;code&gt;line&lt;/code&gt;,Â the program should separate all the user input into lines. You should compare two lines by length and in case two lines have the same length - lexicographically, like the words compared. Notice that you should print the longest line on a separate line so you end up with 4 lines being printed, not 2. You can see this in the examples.&lt;/p&gt;&#10;&#10;&lt;p&gt;You should also add the percentage of occurrence of the found word among all words (words, integers or lines).&lt;/p&gt;&#10;&#10;&lt;p&gt;By the way, in the case of lines, you should print the longest line on a separate line, but words and numbers should be printed on the same line as percentages. You can see this behavior in the examples.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Run configuration examples&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java SortingTool -dataType long&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java SortingTool -dataType line&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java SortingTool -dataType word&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Input example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;1 -2   333 4&#10;42&#10;1                 1&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Output example for words&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Total words: 7.&#10;The longest word: 333 (1 time(s), 14%).&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Output example for lines&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Total lines: 3.&#10;The longest line:&#10;1  Â  Â  Â  Â  Â  Â  Â   1&#10;(1 time(s), 33%).&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Output example for integersÂ &lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Total numbers: 7.&#10;The greatest number: 333 (1 time(s), 14%).&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/45/stages/240/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5382" />
                      <option name="index" value="2" />
                      <option name="name" value="Not only numbers" />
                      <option name="record" value="2" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="test/SortingTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/SortingTest.java" />
                                <option name="text" value="import common.SortingToolStage2Test;&#10;&#10;public class SortingTest extends SortingToolStage2Test {&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/SortingToolStage2Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/SortingToolStage2Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest&#10;import org.hyperskill.hstest.v5.testcase.CheckResult&#10;import org.hyperskill.hstest.v5.testcase.TestCase&#10;import sorting.Main&#10;import java.util.*&#10;import kotlin.math.roundToInt&#10;&#10;abstract class SortingToolStage2Test : BaseStageTest&lt;SortingToolClue&gt;(Main::class.java) {&#10;&#10;    override fun generate(): List&lt;TestCase&lt;SortingToolClue&gt;&gt; {&#10;        return stage1Tests() + stage2Tests()&#10;    }&#10;&#10;    override fun check(reply: String, clue: SortingToolClue): CheckResult {&#10;        return when {&#10;            &quot;long&quot; in clue.args -&gt; checkForLong(clue, reply)&#10;            &quot;word&quot; in clue.args -&gt; checkForWord(clue, reply)&#10;            &quot;line&quot; in clue.args -&gt; checkForLine(clue, reply)&#10;&#10;            else -&gt; throw IllegalArgumentException(&quot;Bad test: no data type found&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;fun stage1Tests(): List&lt;TestCase&lt;SortingToolClue&gt;&gt; {&#10;    return listOf(&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   33 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true&#10;            ),&#10;            createTest(&quot;1 2 2 3 4 5 5&quot;, true),&#10;            createTest(&quot;1 1 2 2 3 4 4 4&quot;, false)&#10;    )&#10;}&#10;&#10;fun stage2Tests(): List&lt;TestCase&lt;SortingToolClue&gt;&gt; {&#10;    return listOf(&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-dataType&quot;, &quot;word&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;abcc de a&quot;&quot;&quot;.trimMargin(),&#10;                    false,&#10;                    &quot;-dataType&quot;, &quot;word&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-dataType&quot;, &quot;line&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1111&#10;                |22222&#10;                |3&#10;                |44&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    false,&#10;                    &quot;-dataType&quot;, &quot;line&quot;&#10;            )&#10;    )&#10;}&#10;&#10;&#10;fun revealRawTest(clue: SortingToolClue, reply: String): String {&#10;    return with(clue) { &quot;Args:\n${args.joinToString(&quot; &quot;)}\nInput:\n$consoleInput\nYour output:\n$reply\n\n&quot; }&#10;}&#10;&#10;&#10;class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List&lt;String&gt;)&#10;&#10;&#10;fun createTest(&#10;        consoleInput: String,&#10;        revealTest: Boolean,&#10;        vararg args: String = arrayOf(&quot;-dataType&quot;, &quot;long&quot;)&#10;): TestCase&lt;SortingToolClue&gt; {&#10;    return TestCase&lt;SortingToolClue&gt;()&#10;            .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))&#10;            .setInput(consoleInput)&#10;            .addArguments(*args)&#10;}&#10;&#10;&#10;fun checkForLong(clue: SortingToolClue, reply_: String): CheckResult {&#10;    val reply = reply_.trim()&#10;    val regex = &quot;&quot;&quot;(\d+)\D+(\d+)\D+(\d+)&quot;&quot;&quot;.toRegex()&#10;    val matchResult = regex.find(reply)&#10;    if (matchResult == null) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Can't parse your output. Please check if your output contains three numbers\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Can't parse your output.&quot;)&#10;        }&#10;    }&#10;&#10;    val (totalNumbers, greatestNumber, greatestNumberCount) = matchResult.groupValues.drop(1).map { it.toInt() }&#10;&#10;    val scanner = Scanner(clue.consoleInput)&#10;&#10;    val actualNumbers = mutableListOf&lt;Int&gt;()&#10;&#10;    while (scanner.hasNextInt()) {&#10;        actualNumbers.add(scanner.nextInt())&#10;    }&#10;&#10;    val actualTotal = actualNumbers.size&#10;&#10;    if (actualTotal != totalNumbers) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Total numbers ($totalNumbers) are incorrect. Expected: $actualTotal.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Total numbers are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val actualMax = actualNumbers.max()&#10;&#10;    if (actualMax != greatestNumber) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Greatest number ($greatestNumber) is incorrect. Expected: $actualMax.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Greatest number is incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val actualMaxCount = actualNumbers.count { it == actualMax }&#10;&#10;    if (actualMaxCount != greatestNumberCount) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Greatest number times ($greatestNumberCount) are incorrect. Expected: $actualMaxCount.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Greatest number times are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    return CheckResult(true)&#10;}&#10;&#10;&#10;fun checkForWord(clue: SortingToolClue, reply_: String): CheckResult {&#10;    val reply = reply_.trim()&#10;    val regex = &quot;&quot;&quot;(\d+)\D+: (.+) \(\D*(\d+)\D+(\d+)\D*\)&quot;&quot;&quot;.toRegex()&#10;    val matchResult = regex.find(reply)&#10;    if (matchResult == null) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Can't parse your output.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Can't parse your output.&quot;)&#10;        }&#10;    }&#10;&#10;    val totalWords = matchResult.groupValues[1].toInt()&#10;    val word = matchResult.groupValues[2]&#10;    val longestWordCount = matchResult.groupValues[3].toInt()&#10;    val longestWordPercentage = matchResult.groupValues[4].toInt()&#10;&#10;    val scanner = Scanner(clue.consoleInput)&#10;&#10;    val actualWords = mutableListOf&lt;String&gt;()&#10;&#10;    while (scanner.hasNext()) {&#10;        actualWords.add(scanner.next())&#10;    }&#10;&#10;    val actualTotal = actualWords.size&#10;&#10;    if (actualTotal != totalWords) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Total words ($totalWords) are incorrect. Expected: $actualTotal.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Total words are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val actualMax = actualWords.maxBy { it.length }&#10;&#10;    if (actualMax != word) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Longest word ($word) is incorrect. Expected: $actualMax.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Longest word is incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val actualMaxCount = actualWords.count { it == actualMax }&#10;&#10;    if (actualMaxCount != longestWordCount) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Longest word times ($longestWordCount) are incorrect. Expected: $actualMaxCount.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Longest word times are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val actualPercentage = (actualMaxCount * 100.0 / actualTotal).roundToInt()&#10;&#10;    if (actualPercentage != longestWordPercentage) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Percentage ($longestWordPercentage) is incorrect. Expected: $actualPercentage.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Percentage is incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    return CheckResult(true)&#10;}&#10;&#10;&#10;fun checkForLine(clue: SortingToolClue, reply_: String): CheckResult {&#10;    val reply = reply_.trim()&#10;    val lines = reply.lines()&#10;&#10;    if (lines.size != 4) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Can't parse your output: expected 4 lines.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Can't parse your output: expected 4 lines.&quot;)&#10;        }&#10;    }&#10;&#10;    val totalRegex = &quot;&quot;&quot;(\d+)&quot;&quot;&quot;.toRegex()&#10;    val totalMatchResult = totalRegex.find(lines[0])&#10;    if (totalMatchResult == null) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Can't find number in the first line of your output.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Can't find number in the first line of your output.&quot;)&#10;        }&#10;    }&#10;&#10;    val totalLines = totalMatchResult.groupValues[1].toInt()&#10;    val line = lines[2]&#10;&#10;    val countRegex = &quot;&quot;&quot;(\d+)\D+(\d+)&quot;&quot;&quot;.toRegex()&#10;    val countMatchResult = countRegex.find(lines[3])&#10;    if (countMatchResult == null) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Can't find two numbers in the last line of your output.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Can't find two numbers in the last line of your output.&quot;)&#10;        }&#10;    }&#10;&#10;    val longestWordCount = countMatchResult.groupValues[1].toInt()&#10;    val longestWordPercentage = countMatchResult.groupValues[2].toInt()&#10;&#10;    val actualLines = clue.consoleInput.lines()&#10;&#10;    val actualTotal = actualLines.size&#10;&#10;    if (actualTotal != totalLines) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Total lines ($totalLines) are incorrect. Expected: $actualTotal.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Total lines are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val actualMax = actualLines.maxBy { it.length }&#10;&#10;    if (actualMax != line) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Longest line ($line) is incorrect. Expected: $actualMax.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Longest line is incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val actualMaxCount = actualLines.count { it == actualMax }&#10;&#10;    if (actualMaxCount != longestWordCount) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Longest line times ($longestWordCount) are incorrect. Expected: $actualMaxCount.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Longest line times are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val actualPercentage = (actualMaxCount * 100.0 / actualTotal).roundToInt()&#10;&#10;    if (actualPercentage != longestWordPercentage) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Percentage ($longestWordPercentage) is incorrect. Expected: $actualPercentage.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Percentage is incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    return CheckResult(true)&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/sorting/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/sorting/Main.java" />
                                <option name="text" value="package sorting;&#10;&#10;import java.util.*;&#10;&#10;public class Main {&#10;    public static void main(final String[] args) {&#10;        Scanner scanner = new Scanner(System.in);&#10;&#10;        while (scanner.hasNextLong()) {&#10;            long number = scanner.nextLong();&#10;            // write your code here&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1563030678000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage, you should parse &lt;code&gt;-sortIntegers&lt;/code&gt;Â argument. This argument should indicate that the numbers that user input should be sorted.Â &lt;/p&gt;&#10;&#10;&lt;p&gt;If the &lt;code&gt;-sortIntegers&lt;/code&gt; argument is presented, you should ignore other arguments, otherwise, the behavior of the program should be the same as in the previous stage.&lt;/p&gt;&#10;&#10;&lt;p&gt;After processing user data, printÂ &lt;code&gt;Sorted data:&lt;/code&gt; and then print all integers sorted in ascending order.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Run configuration examples&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java SortingTool -sortIntegers&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Input example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;1 -2   33 4&#10;42&#10;1                 1&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Output example (for sorting task)&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Total numbers: 7.&#10;Sorted data: -2 1 1 1 4 33 42&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/45/stages/241/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5383" />
                      <option name="index" value="3" />
                      <option name="name" value="Sorting it out" />
                      <option name="record" value="3" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="test/SortingTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/SortingTest.java" />
                                <option name="text" value="import common.SortingToolStage3Test;&#10;&#10;public class SortingTest extends SortingToolStage3Test {&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/SortingToolStage3Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/SortingToolStage3Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest&#10;import org.hyperskill.hstest.v5.testcase.CheckResult&#10;import org.hyperskill.hstest.v5.testcase.TestCase&#10;import sorting.Main&#10;import java.util.*&#10;import kotlin.math.roundToInt&#10;&#10;abstract class SortingToolStage3Test : BaseStageTest&lt;SortingToolClue&gt;(Main::class.java) {&#10;&#10;    override fun generate(): List&lt;TestCase&lt;SortingToolClue&gt;&gt; {&#10;        return stage1Tests() + stage2Tests() + stage3Tests()&#10;    }&#10;&#10;    override fun check(reply: String, clue: SortingToolClue): CheckResult {&#10;        return when {&#10;            &quot;-sortIntegers&quot; in clue.args -&gt; checkNatural(&#10;                    parseLongTokens(clue.consoleInput),&#10;                    ::parseLongTokens,&#10;                    clue,&#10;                    reply&#10;            )&#10;&#10;            &quot;long&quot; in clue.args -&gt; checkForLong(clue, reply)&#10;            &quot;word&quot; in clue.args -&gt; checkForWord(clue, reply)&#10;            &quot;line&quot; in clue.args -&gt; checkForLine(clue, reply)&#10;&#10;            else -&gt; throw IllegalArgumentException(&quot;Bad test: no data type found&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;fun stage1Tests(): List&lt;TestCase&lt;SortingToolClue&gt;&gt; {&#10;    return listOf(&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   33 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true&#10;            ),&#10;            createTest(&quot;1 2 2 3 4 5 5&quot;, true),&#10;            createTest(&quot;1 1 2 2 3 4 4 4&quot;, false)&#10;    )&#10;}&#10;&#10;&#10;fun stage2Tests(): List&lt;TestCase&lt;SortingToolClue&gt;&gt; {&#10;    return listOf(&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-dataType&quot;, &quot;word&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;abcc de a&quot;&quot;&quot;.trimMargin(),&#10;                    false,&#10;                    &quot;-dataType&quot;, &quot;word&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-dataType&quot;, &quot;line&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1111&#10;                |22222&#10;                |3&#10;                |44&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    false,&#10;                    &quot;-dataType&quot;, &quot;line&quot;&#10;            )&#10;    )&#10;}&#10;&#10;&#10;fun stage3Tests(): List&lt;TestCase&lt;SortingToolClue&gt;&gt; {&#10;    return listOf(&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-dataType&quot;, &quot;word&quot;, &quot;-sortIntegers&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-sortIntegers&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1111&#10;                |22222&#10;                |3&#10;                |44&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    false,&#10;                    &quot;-sortIntegers&quot;, &quot;-dataType&quot;, &quot;line&quot;&#10;            )&#10;    )&#10;}&#10;&#10;&#10;&#10;fun revealRawTest(clue: SortingToolClue, reply: String): String {&#10;    return with(clue) { &quot;Args:\n${args.joinToString(&quot; &quot;)}\nInput:\n$consoleInput\nYour output:\n$reply\n\n&quot; }&#10;}&#10;&#10;class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List&lt;String&gt;)&#10;&#10;fun createTest(&#10;        consoleInput: String,&#10;        revealTest: Boolean,&#10;        vararg args: String = arrayOf(&quot;-dataType&quot;, &quot;long&quot;)&#10;): TestCase&lt;SortingToolClue&gt; {&#10;    return TestCase&lt;SortingToolClue&gt;()&#10;            .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))&#10;            .setInput(consoleInput)&#10;            .addArguments(*args)&#10;}&#10;&#10;fun checkForLong(clue: SortingToolClue, reply_: String): CheckResult {&#10;    val reply = reply_.trim()&#10;    val regex = &quot;&quot;&quot;(\d+)\D+(\d+)\D+(\d+)&quot;&quot;&quot;.toRegex()&#10;    val matchResult = regex.find(reply)&#10;    if (matchResult == null) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Can't parse your output. Please check if your output contains three numbers\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Can't parse your output.&quot;)&#10;        }&#10;    }&#10;&#10;    val (totalNumbers, greatestNumber, greatestNumberCount) = matchResult.groupValues.drop(1).map { it.toInt() }&#10;&#10;    val scanner = Scanner(clue.consoleInput)&#10;&#10;    val actualNumbers = mutableListOf&lt;Int&gt;()&#10;&#10;    while (scanner.hasNextInt()) {&#10;        actualNumbers.add(scanner.nextInt())&#10;    }&#10;&#10;    val actualTotal = actualNumbers.size&#10;&#10;    if (actualTotal != totalNumbers) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Total numbers ($totalNumbers) are incorrect. Expected: $actualTotal.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Total numbers are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val actualMax = actualNumbers.max()&#10;&#10;    if (actualMax != greatestNumber) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Greatest number ($greatestNumber) is incorrect. Expected: $actualMax.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Greatest number is incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val actualMaxCount = actualNumbers.count { it == actualMax }&#10;&#10;    if (actualMaxCount != greatestNumberCount) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Greatest number times ($greatestNumberCount) are incorrect. Expected: $actualMaxCount.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Greatest number times are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    return CheckResult(true)&#10;}&#10;&#10;fun checkForWord(clue: SortingToolClue, reply_: String): CheckResult {&#10;    val reply = reply_.trim()&#10;    val regex = &quot;&quot;&quot;(\d+)\D+: (.+) \(\D*(\d+)\D+(\d+)\D*\)&quot;&quot;&quot;.toRegex()&#10;    val matchResult = regex.find(reply)&#10;    if (matchResult == null) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Can't parse your output.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Can't parse your output.&quot;)&#10;        }&#10;    }&#10;&#10;    val totalWords = matchResult.groupValues[1].toInt()&#10;    val word = matchResult.groupValues[2]&#10;    val longestWordCount = matchResult.groupValues[3].toInt()&#10;    val longestWordPercentage = matchResult.groupValues[4].toInt()&#10;&#10;    val scanner = Scanner(clue.consoleInput)&#10;&#10;    val actualWords = mutableListOf&lt;String&gt;()&#10;&#10;    while (scanner.hasNext()) {&#10;        actualWords.add(scanner.next())&#10;    }&#10;&#10;    val actualTotal = actualWords.size&#10;&#10;    if (actualTotal != totalWords) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Total words ($totalWords) are incorrect. Expected: $actualTotal.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Total words are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val actualMax = actualWords.maxBy { it.length }&#10;&#10;    if (actualMax != word) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Longest word ($word) is incorrect. Expected: $actualMax.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Longest word is incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val actualMaxCount = actualWords.count { it == actualMax }&#10;&#10;    if (actualMaxCount != longestWordCount) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Longest word times ($longestWordCount) are incorrect. Expected: $actualMaxCount.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Longest word times are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val actualPercentage = (actualMaxCount * 100.0 / actualTotal).roundToInt()&#10;&#10;    if (actualPercentage != longestWordPercentage) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Percentage ($longestWordPercentage) is incorrect. Expected: $actualPercentage.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Percentage is incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    return CheckResult(true)&#10;}&#10;&#10;fun checkForLine(clue: SortingToolClue, reply_: String): CheckResult {&#10;    val reply = reply_.trim()&#10;    val lines = reply.lines()&#10;&#10;    if (lines.size != 4) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Can't parse your output: expected 4 lines.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Can't parse your output: expected 4 lines.&quot;)&#10;        }&#10;    }&#10;&#10;    val totalRegex = &quot;&quot;&quot;(\d+)&quot;&quot;&quot;.toRegex()&#10;    val totalMatchResult = totalRegex.find(lines[0])&#10;    if (totalMatchResult == null) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Can't find number in the first line of your output.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Can't find number in the first line of your output.&quot;)&#10;        }&#10;    }&#10;&#10;    val totalLines = totalMatchResult.groupValues[1].toInt()&#10;    val line = lines[2]&#10;&#10;    val countRegex = &quot;&quot;&quot;(\d+)\D+(\d+)&quot;&quot;&quot;.toRegex()&#10;    val countMatchResult = countRegex.find(lines[3])&#10;    if (countMatchResult == null) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Can't find two numbers in the last line of your output.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Can't find two numbers in the last line of your output.&quot;)&#10;        }&#10;    }&#10;&#10;    val longestWordCount = countMatchResult.groupValues[1].toInt()&#10;    val longestWordPercentage = countMatchResult.groupValues[2].toInt()&#10;&#10;    val actualLines = clue.consoleInput.lines()&#10;&#10;    val actualTotal = actualLines.size&#10;&#10;    if (actualTotal != totalLines) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Total lines ($totalLines) are incorrect. Expected: $actualTotal.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Total lines are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val actualMax = actualLines.maxBy { it.length }&#10;&#10;    if (actualMax != line) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Longest line ($line) is incorrect. Expected: $actualMax.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Longest line is incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val actualMaxCount = actualLines.count { it == actualMax }&#10;&#10;    if (actualMaxCount != longestWordCount) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Longest line times ($longestWordCount) are incorrect. Expected: $actualMaxCount.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Longest line times are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val actualPercentage = (actualMaxCount * 100.0 / actualTotal).roundToInt()&#10;&#10;    if (actualPercentage != longestWordPercentage) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Percentage ($longestWordPercentage) is incorrect. Expected: $actualPercentage.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Percentage is incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    return CheckResult(true)&#10;}&#10;&#10;fun parseLongTokens(input: String): List&lt;Int&gt; {&#10;    val scanner = Scanner(input)&#10;&#10;    val longTokens = mutableListOf&lt;Int&gt;()&#10;&#10;    while (scanner.hasNextInt()) {&#10;        longTokens.add(scanner.nextInt())&#10;    }&#10;&#10;    return longTokens&#10;}&#10;&#10;fun &lt;TokenType : Comparable&lt;TokenType&gt;&gt; checkNatural(&#10;        actualTokens: List&lt;TokenType&gt;,&#10;        sortedTokensParser: (String) -&gt; List&lt;TokenType&gt;,&#10;        clue: SortingToolClue,&#10;        reply_: String&#10;): CheckResult {&#10;    val reply = reply_.trim()&#10;    val lines = reply.lines()&#10;&#10;    if (lines.size != 2) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Can't parse your output: expected 2 lines.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Can't parse your output: expected 2 lines.&quot;)&#10;        }&#10;    }&#10;&#10;    val totalRegex = &quot;&quot;&quot;(\d+)&quot;&quot;&quot;.toRegex()&#10;    val totalMatchResult = totalRegex.find(lines[0])&#10;    if (totalMatchResult == null) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Can't find number in the first line of your output.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Can't find number in the first line of your output.&quot;)&#10;        }&#10;    }&#10;&#10;    val totalTokens = totalMatchResult.groupValues[1].toInt()&#10;&#10;    val actualTotal = actualTokens.size&#10;&#10;    if (actualTotal != totalTokens) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Total tokens are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val sortedActualTokens = actualTokens.sorted()&#10;&#10;    val sortedTokens = sortedTokensParser(lines[1].substringAfter(&quot;:&quot;).dropWhile { it in setOf('\n', '\r') })&#10;&#10;    val total = sortedTokens.size&#10;&#10;    if (actualTotal != total) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Total sorted tokens are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    if (sortedActualTokens != sortedTokens) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Sorted tokens are incorrect.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Sorted tokens are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    return CheckResult(true)&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/sorting/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/sorting/Main.java" />
                                <option name="text" value="package sorting;&#10;&#10;import java.util.*;&#10;&#10;public class Main {&#10;    public static void main(final String[] args) {&#10;        Scanner scanner = new Scanner(System.in);&#10;&#10;        while (scanner.hasNextLong()) {&#10;            long number = scanner.nextLong();&#10;            // write your code here&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1563030678000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage, you should implement sorting by count. The result should be pairs like &lt;code&gt;(count, dataEntry)&lt;/code&gt; sorted by count.&lt;/p&gt;&#10;&#10;&lt;p&gt;Remove parsing of the &lt;code&gt;-sortIntegers&lt;/code&gt;Â argument. Instead of this argument add another - named &lt;code&gt;-sortingType&lt;/code&gt;.Â  This argument can be followed byÂ &lt;code&gt;natural&lt;/code&gt; or &lt;code&gt;byCount&lt;/code&gt; sorting types. IfÂ &lt;code&gt;-sortingType&lt;/code&gt; is not presented among argument list then considerÂ &lt;code&gt;natural&lt;/code&gt; to be the default sorting type.&lt;/p&gt;&#10;&#10;&lt;p&gt;If &lt;code&gt;-dataType&lt;/code&gt;Â is &lt;code&gt;word&lt;/code&gt; or &lt;code&gt;line&lt;/code&gt;, use &lt;code&gt;String.compareTo(String)&lt;/code&gt; method to compare strings in sorting.&lt;/p&gt;&#10;&#10;&lt;p&gt;To sum up, your program should support two sorting methods now and work with all types of data.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;How-to&lt;/h2&gt;&#10;&#10;&lt;p&gt;You can use the following algorithm:&lt;/p&gt;&#10;&#10;&lt;ol&gt;&#10;  &lt;li&gt;Sort data entries into &lt;code&gt;List&amp;lt;DataType&amp;gt; sortedDataEntries&lt;/code&gt;.&lt;/li&gt;&#10;  &lt;li&gt;Iterate over it and create &lt;code&gt;Map&amp;lt;DataType, Integer&amp;gt; dataEntryToCount&lt;/code&gt;.&lt;/li&gt;&#10;  &lt;li&gt;Iterate over it and create &lt;code&gt;List&amp;lt;Integer&amp;gt; counts&lt;/code&gt;.&lt;/li&gt;&#10;  &lt;li&gt;Sort it into &lt;code&gt;List&amp;lt;Integer&amp;gt; sortedCounts&lt;/code&gt; and remove duplicates in it.&lt;/li&gt;&#10;  &lt;li&gt;Iterate over &lt;code&gt;dataEntryToCount&lt;/code&gt; and create &lt;code&gt;Map&amp;lt;Integer, Set&amp;lt;DataEntry&amp;gt;&amp;gt; countToDataEntries&lt;/code&gt;.&lt;/li&gt;&#10;  &lt;li&gt;Now iterate over &lt;code&gt;sortedCounts&lt;/code&gt; and print all data entries from &lt;code&gt;countToDataEntries.get(count)&lt;/code&gt;.&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&#10;&lt;p&gt;Or you can use &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#sort-java.util.List-java.util.Comparator-&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;sorting with comparator&lt;/a&gt; to skip the last four actions.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Run configuration examples&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java SortingTool -sortingType natural -dataType long&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java SortingTool -dataType word -sortingType byCount&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Input example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;1 -2   33 4&#10;42&#10;1                 1&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Output example for sorting longs by count&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;Total numbers: 7.&#10;-2: 1 time(s), 14%&#10;4: 1 time(s), 14%&#10;33: 1 time(s), 14%&#10;42: 1 time(s), 14%&#10;1: 3 time(s), 43%&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/45/stages/242/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5384" />
                      <option name="index" value="4" />
                      <option name="name" value="Everything counts" />
                      <option name="record" value="4" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="test/SortingTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/SortingTest.java" />
                                <option name="text" value="import common.SortingToolStage4Test;&#10;&#10;public class SortingTest extends SortingToolStage4Test {&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/SortingToolStage4Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/SortingToolStage4Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest&#10;import org.hyperskill.hstest.v5.testcase.CheckResult&#10;import org.hyperskill.hstest.v5.testcase.TestCase&#10;import sorting.Main&#10;import java.util.*&#10;&#10;abstract class SortingToolStage4Test : BaseStageTest&lt;SortingToolClue&gt;(Main::class.java) {&#10;&#10;    override fun generate(): List&lt;TestCase&lt;SortingToolClue&gt;&gt; {&#10;        return stage4Tests()&#10;    }&#10;&#10;    override fun check(reply: String, clue: SortingToolClue): CheckResult {&#10;        return when {&#10;            &quot;byCount&quot; in clue.args -&gt; checkByCount(reply, clue)&#10;            else -&gt; checkNatural(reply, clue)&#10;        }&#10;    }&#10;&#10;    private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {&#10;        return when {&#10;            &quot;long&quot; in clue.args -&gt; checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)&#10;            &quot;word&quot; in clue.args -&gt; checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)&#10;            &quot;line&quot; in clue.args -&gt; checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)&#10;&#10;            else -&gt; throw IllegalArgumentException(&quot;Bad test: no data type found&quot;)&#10;        }&#10;    }&#10;&#10;    private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {&#10;        return when {&#10;            &quot;long&quot; in clue.args -&gt; checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)&#10;            &quot;word&quot; in clue.args -&gt; checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)&#10;            &quot;line&quot; in clue.args -&gt; checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)&#10;&#10;            else -&gt; throw IllegalArgumentException(&quot;Bad test: no data type found&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;fun stage4Tests(): List&lt;TestCase&lt;SortingToolClue&gt;&gt; {&#10;    return listOf(&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-dataType&quot;, &quot;long&quot;, &quot;-sortingType&quot;, &quot;natural&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-dataType&quot;, &quot;long&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-dataType&quot;, &quot;long&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-dataType&quot;, &quot;word&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-dataType&quot;, &quot;line&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1111 1111&#10;                |22222&#10;                |3&#10;                |44&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    false,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-dataType&quot;, &quot;line&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1111 1111&#10;                |22222&#10;                |3&#10;                |44&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    false,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-dataType&quot;, &quot;word&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1111 1111&#10;                |22222&#10;                |3&#10;                |44&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    false,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-dataType&quot;, &quot;long&quot;&#10;            )&#10;    )&#10;}&#10;&#10;&#10;&#10;fun revealRawTest(clue: SortingToolClue, reply: String): String {&#10;    return with(clue) { &quot;Args:\n${args.joinToString(&quot; &quot;)}\nInput:\n$consoleInput\nYour output:\n$reply\n\n&quot; }&#10;}&#10;&#10;class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List&lt;String&gt;)&#10;&#10;fun createTest(&#10;        consoleInput: String,&#10;        revealTest: Boolean,&#10;        vararg args: String = arrayOf(&quot;-dataType&quot;, &quot;long&quot;)&#10;): TestCase&lt;SortingToolClue&gt; {&#10;    return TestCase&lt;SortingToolClue&gt;()&#10;            .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))&#10;            .setInput(consoleInput)&#10;            .addArguments(*args)&#10;}&#10;&#10;fun parseLongTokens(input: String): List&lt;Int&gt; {&#10;    val scanner = Scanner(input)&#10;&#10;    val longTokens = mutableListOf&lt;Int&gt;()&#10;&#10;    while (scanner.hasNextInt()) {&#10;        longTokens.add(scanner.nextInt())&#10;    }&#10;&#10;    return longTokens&#10;}&#10;&#10;fun parseWordTokens(input: String): List&lt;String&gt; {&#10;    val scanner = Scanner(input)&#10;&#10;    val wordTokens = mutableListOf&lt;String&gt;()&#10;&#10;    while (scanner.hasNext()) {&#10;        wordTokens.add(scanner.next())&#10;    }&#10;&#10;    return wordTokens&#10;}&#10;&#10;fun parseLineTokens(input: String): List&lt;String&gt; {&#10;    return input.lines()&#10;}&#10;&#10;fun &lt;TokenType : Comparable&lt;TokenType&gt;&gt; checkNatural(&#10;        actualTokens: List&lt;TokenType&gt;,&#10;        sortedTokensParser: (String) -&gt; List&lt;TokenType&gt;,&#10;        clue: SortingToolClue,&#10;        reply_: String&#10;): CheckResult {&#10;    val reply = reply_.trim()&#10;    val lines = reply.lines()&#10;&#10;    if (lines.size != 2) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Can't parse your output: expected 2 lines.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Can't parse your output: expected 2 lines.&quot;)&#10;        }&#10;    }&#10;&#10;    val totalRegex = &quot;&quot;&quot;(\d+)&quot;&quot;&quot;.toRegex()&#10;    val totalMatchResult = totalRegex.find(lines[0])&#10;    if (totalMatchResult == null) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Can't find number in the first line of your output.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Can't find number in the first line of your output.&quot;)&#10;        }&#10;    }&#10;&#10;    val totalTokens = totalMatchResult.groupValues[1].toInt()&#10;&#10;    val actualTotal = actualTokens.size&#10;&#10;    if (actualTotal != totalTokens) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Total tokens are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val sortedActualTokens = actualTokens.sorted()&#10;&#10;    val sortedTokens = sortedTokensParser(lines[1].substringAfter(&quot;:&quot;).dropWhile { it in setOf('\n', '\r') })&#10;&#10;    val total = sortedTokens.size&#10;&#10;    if (actualTotal != total) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Total sorted tokens are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    if (sortedActualTokens != sortedTokens) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Sorted tokens are incorrect.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Sorted tokens are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    return CheckResult(true)&#10;}&#10;&#10;fun &lt;TokenType : Comparable&lt;TokenType&gt;&gt; checkByCount(&#10;        actualTokens: List&lt;TokenType&gt;,&#10;        tokenParser: (String) -&gt; TokenType,&#10;        clue: SortingToolClue,&#10;        reply_: String&#10;): CheckResult {&#10;    val reply = reply_.trim()&#10;    val lines = reply.lines()&#10;&#10;    val totalRegex = &quot;&quot;&quot;(\d+)&quot;&quot;&quot;.toRegex()&#10;    val totalMatchResult = totalRegex.find(lines[0])&#10;    if (totalMatchResult == null) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Can't find number in the first line of your output.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Can't find number in the first line of your output.&quot;)&#10;        }&#10;    }&#10;&#10;    val totalTokens = totalMatchResult.groupValues[1].toInt()&#10;&#10;    val actualTotal = actualTokens.size&#10;&#10;    if (actualTotal != totalTokens) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Total tokens are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val tokenToCount = mutableMapOf&lt;TokenType, Int&gt;()&#10;&#10;    for (token in actualTokens) {&#10;        tokenToCount[token] = (tokenToCount[token] ?: 0) + 1&#10;    }&#10;&#10;    val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))&#10;    val linesWithTokens = lines.drop(1)&#10;&#10;    if (actualSortedByCount.size != linesWithTokens.size) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Lines with tokens are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    for ((lineId, line) in linesWithTokens.withIndex()) {&#10;        val token = tokenParser(line.substringBefore(':'))&#10;        val info = line.substringAfter(':')&#10;&#10;        val (actualToken, actualTimes) = actualSortedByCount[lineId]&#10;&#10;        if (token != actualToken) {&#10;            return if (clue.revealTest) {&#10;                CheckResult(&#10;                        false,&#10;                        &quot;Token ($token) is incorrect. Expected: $actualToken.\n&quot; +&#10;                                revealRawTest(clue, reply)&#10;                )&#10;            } else {&#10;                CheckResult(false, &quot;Token is incorrect.&quot;)&#10;            }&#10;        }&#10;&#10;        // TODO: check info (times and percentage)&#10;    }&#10;&#10;    return CheckResult(true)&#10;}&#10;&#10;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/sorting/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/sorting/Main.java" />
                                <option name="text" value="package sorting;&#10;&#10;import java.util.*;&#10;&#10;public class Main {&#10;    public static void main(final String[] args) {&#10;        Scanner scanner = new Scanner(System.in);&#10;&#10;        while (scanner.hasNextLong()) {&#10;            long number = scanner.nextLong();&#10;            // write your code here&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/sorting/Multiset.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/sorting/Multiset.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/sorting/TreeMultiset.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/sorting/TreeMultiset.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1563030678000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;What if someone runs your program like this: &lt;code&gt;java SortingTool -sortingType&lt;/code&gt;? The value of the &lt;code&gt;-sortingType&lt;/code&gt;Â argument is missing!&lt;/p&gt;&#10;&#10;&lt;p&gt;And what if &lt;code&gt;-dataType&lt;/code&gt; argument is &lt;code&gt;long&lt;/code&gt; but there are words in the input text?&lt;/p&gt;&#10;&#10;&lt;p&gt;What if there are unknown arguments?&lt;/p&gt;&#10;&#10;&lt;p&gt;Let's handle these errors.Â &lt;/p&gt;&#10;&#10;&lt;p&gt;In summary, for this stage, implement error messages when the input is wrong.&lt;/p&gt;&#10;&#10;&lt;p&gt;Â &lt;/p&gt;&#10;&#10;&lt;h2&gt;Run configuration example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java SortingTool -sortingType&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;No sorting type defined!&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2&gt;Â &lt;/h2&gt;&#10;&#10;&lt;h2&gt;Run configuration example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java SortingTool -dataType&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;No data type defined!&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Â &lt;/p&gt;&#10;&#10;&lt;h2&gt;Run configuration example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java SortingTool -dataType long -sortingType natural -abc -def&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2&gt;Input example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;a 2 -42&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;&quot;-abc&quot; isn't a valid parameter. It's skipped.&#10;&quot;-def&quot; isn't a valid parameter. It's skipped.&#10;&quot;a&quot; isn't a long. It's skipped.&#10;Total numbers: 7.&#10;Sorted data: -42 2&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/45/stages/243/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5385" />
                      <option name="index" value="5" />
                      <option name="name" value="Error!" />
                      <option name="record" value="5" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="test/SortingTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/SortingTest.java" />
                                <option name="text" value="import common.SortingToolStage5Test;&#10;&#10;public class SortingTest extends SortingToolStage5Test {&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/SortingToolStage5Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/SortingToolStage5Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest&#10;import org.hyperskill.hstest.v5.testcase.CheckResult&#10;import org.hyperskill.hstest.v5.testcase.TestCase&#10;import sorting.Main&#10;import java.util.*&#10;&#10;abstract class SortingToolStage5Test : BaseStageTest&lt;SortingToolClue&gt;(Main::class.java) {&#10;&#10;    override fun generate(): List&lt;TestCase&lt;SortingToolClue&gt;&gt; {&#10;        return stage4Tests() + stage5Tests()&#10;    }&#10;&#10;    override fun check(reply: String, clue: SortingToolClue): CheckResult {&#10;        return when {&#10;            badArgs(clue.args) -&gt; CheckResult(true)  // TODO: test something here&#10;            &quot;byCount&quot; in clue.args -&gt; checkByCount(reply, clue)&#10;            else -&gt; checkNatural(reply, clue)&#10;        }&#10;    }&#10;&#10;    private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {&#10;        return when {&#10;            &quot;long&quot; in clue.args -&gt; checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)&#10;            &quot;word&quot; in clue.args -&gt; checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)&#10;            &quot;line&quot; in clue.args -&gt; checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)&#10;&#10;            else -&gt; throw IllegalArgumentException(&quot;Bad test: no data type found&quot;)&#10;        }&#10;    }&#10;&#10;    private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {&#10;        return when {&#10;            &quot;long&quot; in clue.args -&gt; checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)&#10;            &quot;word&quot; in clue.args -&gt; checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)&#10;            &quot;line&quot; in clue.args -&gt; checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)&#10;&#10;            else -&gt; throw IllegalArgumentException(&quot;Bad test: no data type found&quot;)&#10;        }&#10;    }&#10;&#10;    private fun badArgs(args: List&lt;String&gt;): Boolean {&#10;        val unknownArgs =&#10;                args.toSet() - setOf(&quot;-dataType&quot;, &quot;-sortingType&quot;, &quot;long&quot;, &quot;word&quot;, &quot;line&quot;, &quot;natural&quot;, &quot;byCount&quot;)&#10;&#10;        if (unknownArgs.isNotEmpty()) {&#10;            return true&#10;        }&#10;&#10;        if (args.last() == &quot;-dataType&quot; || args.last() == &quot;-sortingType&quot;) {&#10;            return true&#10;        }&#10;&#10;        return false&#10;    }&#10;}&#10;&#10;fun stage5Tests(): List&lt;TestCase&lt;SortingToolClue&gt;&gt; {&#10;    return listOf(&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-sortingType&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-dataType&quot;, &quot;long&quot;, &quot;-abc&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1111 1111&#10;                |22222&#10;                |3&#10;                |44&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    false,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-dataType&quot;, &quot;line&quot;, &quot;-cde&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1111 1111&#10;                |22222&#10;                |3&#10;                |44&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    false,&#10;                    &quot;-dataType&quot;, &quot;line&quot;, &quot;-sortingType&quot;&#10;            )&#10;    )&#10;}&#10;&#10;&#10;fun stage4Tests(): List&lt;TestCase&lt;SortingToolClue&gt;&gt; {&#10;    return listOf(&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-dataType&quot;, &quot;long&quot;, &quot;-sortingType&quot;, &quot;natural&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-dataType&quot;, &quot;long&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-dataType&quot;, &quot;long&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-dataType&quot;, &quot;word&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-dataType&quot;, &quot;line&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1111 1111&#10;                |22222&#10;                |3&#10;                |44&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    false,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-dataType&quot;, &quot;line&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1111 1111&#10;                |22222&#10;                |3&#10;                |44&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    false,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-dataType&quot;, &quot;word&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1111 1111&#10;                |22222&#10;                |3&#10;                |44&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    false,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-dataType&quot;, &quot;long&quot;&#10;            )&#10;    )&#10;}&#10;&#10;&#10;fun revealRawTest(clue: SortingToolClue, reply: String): String {&#10;    return with(clue) { &quot;Args:\n${args.joinToString(&quot; &quot;)}\nInput:\n$consoleInput\nYour output:\n$reply\n\n&quot; }&#10;}&#10;&#10;class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List&lt;String&gt;)&#10;&#10;fun createTest(&#10;        consoleInput: String,&#10;        revealTest: Boolean,&#10;        vararg args: String = arrayOf(&quot;-dataType&quot;, &quot;long&quot;)&#10;): TestCase&lt;SortingToolClue&gt; {&#10;    return TestCase&lt;SortingToolClue&gt;()&#10;            .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))&#10;            .setInput(consoleInput)&#10;            .addArguments(*args)&#10;}&#10;&#10;fun parseLongTokens(input: String): List&lt;Int&gt; {&#10;    val scanner = Scanner(input)&#10;&#10;    val longTokens = mutableListOf&lt;Int&gt;()&#10;&#10;    while (scanner.hasNextInt()) {&#10;        longTokens.add(scanner.nextInt())&#10;    }&#10;&#10;    return longTokens&#10;}&#10;&#10;fun parseWordTokens(input: String): List&lt;String&gt; {&#10;    val scanner = Scanner(input)&#10;&#10;    val wordTokens = mutableListOf&lt;String&gt;()&#10;&#10;    while (scanner.hasNext()) {&#10;        wordTokens.add(scanner.next())&#10;    }&#10;&#10;    return wordTokens&#10;}&#10;&#10;fun parseLineTokens(input: String): List&lt;String&gt; {&#10;    return input.lines()&#10;}&#10;&#10;fun &lt;TokenType : Comparable&lt;TokenType&gt;&gt; checkNatural(&#10;        actualTokens: List&lt;TokenType&gt;,&#10;        sortedTokensParser: (String) -&gt; List&lt;TokenType&gt;,&#10;        clue: SortingToolClue,&#10;        reply_: String&#10;): CheckResult {&#10;    val reply = reply_.trim()&#10;    val lines = reply.lines()&#10;&#10;    if (lines.size != 2) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Can't parse your output: expected 2 lines.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Can't parse your output: expected 2 lines.&quot;)&#10;        }&#10;    }&#10;&#10;    val totalRegex = &quot;&quot;&quot;(\d+)&quot;&quot;&quot;.toRegex()&#10;    val totalMatchResult = totalRegex.find(lines[0])&#10;    if (totalMatchResult == null) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Can't find number in the first line of your output.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Can't find number in the first line of your output.&quot;)&#10;        }&#10;    }&#10;&#10;    val totalTokens = totalMatchResult.groupValues[1].toInt()&#10;&#10;    val actualTotal = actualTokens.size&#10;&#10;    if (actualTotal != totalTokens) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Total tokens are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val sortedActualTokens = actualTokens.sorted()&#10;&#10;    val sortedTokens = sortedTokensParser(lines[1].substringAfter(&quot;:&quot;).dropWhile { it in setOf('\n', '\r') })&#10;&#10;    val total = sortedTokens.size&#10;&#10;    if (actualTotal != total) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Total sorted tokens are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    if (sortedActualTokens != sortedTokens) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Sorted tokens are incorrect.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Sorted tokens are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    return CheckResult(true)&#10;}&#10;&#10;fun &lt;TokenType : Comparable&lt;TokenType&gt;&gt; checkByCount(&#10;        actualTokens: List&lt;TokenType&gt;,&#10;        tokenParser: (String) -&gt; TokenType,&#10;        clue: SortingToolClue,&#10;        reply_: String&#10;): CheckResult {&#10;    val reply = reply_.trim()&#10;    val lines = reply.lines()&#10;&#10;    val totalRegex = &quot;&quot;&quot;(\d+)&quot;&quot;&quot;.toRegex()&#10;    val totalMatchResult = totalRegex.find(lines[0])&#10;    if (totalMatchResult == null) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Can't find number in the first line of your output.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Can't find number in the first line of your output.&quot;)&#10;        }&#10;    }&#10;&#10;    val totalTokens = totalMatchResult.groupValues[1].toInt()&#10;&#10;    val actualTotal = actualTokens.size&#10;&#10;    if (actualTotal != totalTokens) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Total tokens are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val tokenToCount = mutableMapOf&lt;TokenType, Int&gt;()&#10;&#10;    for (token in actualTokens) {&#10;        tokenToCount[token] = (tokenToCount[token] ?: 0) + 1&#10;    }&#10;&#10;    val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))&#10;    val linesWithTokens = lines.drop(1)&#10;&#10;    if (actualSortedByCount.size != linesWithTokens.size) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Lines with tokens are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    for ((lineId, line) in linesWithTokens.withIndex()) {&#10;        val token = tokenParser(line.substringBefore(':'))&#10;        val info = line.substringAfter(':')&#10;&#10;        val (actualToken, actualTimes) = actualSortedByCount[lineId]&#10;&#10;        if (token != actualToken) {&#10;            return if (clue.revealTest) {&#10;                CheckResult(&#10;                        false,&#10;                        &quot;Token ($token) is incorrect. Expected: $actualToken.\n&quot; +&#10;                                revealRawTest(clue, reply)&#10;                )&#10;            } else {&#10;                CheckResult(false, &quot;Token is incorrect.&quot;)&#10;            }&#10;        }&#10;&#10;        // TODO: check info (times and percentage)&#10;    }&#10;&#10;    return CheckResult(true)&#10;}&#10;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/sorting/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/sorting/Main.java" />
                                <option name="text" value="package sorting;&#10;&#10;import java.util.*;&#10;&#10;public class Main {&#10;    public static void main(final String[] args) {&#10;        Scanner scanner = new Scanner(System.in);&#10;&#10;        while (scanner.hasNextLong()) {&#10;            long number = scanner.nextLong();&#10;            // write your code here&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/sorting/Multiset.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/sorting/Multiset.java" />
                                <option name="text" value="package sorting;&#10;&#10;import java.util.Set;&#10;&#10;interface Multiset&lt;E&gt; {&#10;&#10;    /**&#10;     * Add an element to the multiset.&#10;     * It increases the multiplicity of the element by 1.&#10;     */&#10;    void add(E elem);&#10;&#10;    /**&#10;     * Remove an element from the multiset.&#10;     * It decreases the multiplicity of the element by 1.&#10;     */&#10;    void remove(E elem);&#10;&#10;    /**&#10;     * Union this multiset with another one. The result is the modified multiset (this).&#10;     * It will contain all elements that are present in at least one of the initial multisets.&#10;     * The multiplicity of each element is equal to the maximum multiplicity of&#10;     * the corresponding elements in both multisets.&#10;     */&#10;    void union(Multiset&lt;E&gt; other);&#10;&#10;    /**&#10;     * Intersect this multiset with another one. The result is the modified multiset (this).&#10;     * It will contain all elements that are present in the both multisets.&#10;     * The multiplicity of each element is equal to the minimum multiplicity of&#10;     * the corresponding elements in the intersecting multisets.&#10;     */&#10;    void intersect(Multiset&lt;E&gt; other);&#10;&#10;    /**&#10;     * Returns multiplicity of the given element.&#10;     * If the set doesn't contain it, the multiplicity is 0&#10;     */&#10;    int getMultiplicity(E elem);&#10;&#10;    /**&#10;     * Check the multiset contains an element,&#10;     * i.e. the multiplicity &gt; 0&#10;     */&#10;    boolean contains(E elem);&#10;&#10;    /**&#10;     * The number of unique elements&#10;     */&#10;    int numberOfUniqueElements();&#10;&#10;    /**&#10;     * The size of the multiset, including repeated elements&#10;     */&#10;    int size();&#10;&#10;    /**&#10;     * The set of unique elements (without repeating)&#10;     */&#10;    Set&lt;E&gt; toSet();&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/sorting/TreeMultiset.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/sorting/TreeMultiset.java" />
                                <option name="text" value="package sorting;&#10;&#10;import java.util.*;&#10;&#10;public class TreeMultiset &lt;E&gt; implements Multiset&lt;E&gt; {&#10;&#10;&#10;        private Map&lt;E, Integer&gt; map = new TreeMap&lt;&gt;();&#10;&#10;        public Map&lt;E, Integer&gt; getMap(){&#10;            return this.map;&#10;        }&#10;&#10;        @Override&#10;        public void add(E elem) {&#10;&#10;            int newVal = null != map.get(elem) ? map.getOrDefault(elem, 0) : 0;&#10;            //if(newVal&gt;1){&#10;            map.put(elem, newVal+1);&#10;            //}&#10;        }&#10;&#10;        @Override&#10;        public void remove(E elem) {&#10;            if(this.contains(elem)){&#10;                int currentVal=map.get(elem);&#10;                map.put(elem, currentVal-1);&#10;            }&#10;            if(this.getMultiplicity(elem) == 0){&#10;                this.map.remove(elem);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void union(Multiset&lt;E&gt; other) {&#10;            for(E o: other.toSet()){&#10;                int oVal = other.getMultiplicity(o);&#10;                if(this.contains(o)){&#10;                    int thisVal = this.getMultiplicity(o);&#10;                    map.put(o, Math.max(thisVal, oVal));&#10;                }else{&#10;                    map.put(o, oVal);&#10;                }&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void intersect(Multiset&lt;E&gt; other) {&#10;            int l = this.toSet().size();&#10;            List&lt;E&gt; listSet = new ArrayList&lt;&gt;(this.toSet());&#10;            for(int j=l-1; j&gt;=0; j--){&#10;                E e = listSet.get(j);&#10;                if (!other.contains(e)){&#10;                    map.remove(e);&#10;                }else{&#10;                    int thisVal = this.getMultiplicity(e);&#10;                    int oVal = other.getMultiplicity(e);&#10;                    map.put(e, Math.min(thisVal, oVal));&#10;                }&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public int getMultiplicity(E elem) {&#10;            return null != map.get(elem) ? map.getOrDefault(elem, 0) : 0;&#10;        }&#10;&#10;        @Override&#10;        public boolean contains(E elem) {&#10;            return this.getMultiplicity(elem) &gt; 0;&#10;        }&#10;&#10;        @Override&#10;        public int numberOfUniqueElements() {&#10;            int count =0;&#10;            for(E o:this.toSet()){&#10;                if( this.getMultiplicity(o) == 1){&#10;                    count++;&#10;                }&#10;            }&#10;            return count&lt;=this.size() ? count : 0;&#10;        }&#10;&#10;        @Override&#10;        public int size() {&#10;            int countSize =0;&#10;            for(E o:this.toSet()){&#10;                int currentVal = this.getMultiplicity(o);&#10;                if(currentVal&gt;0) {&#10;                    countSize += currentVal;&#10;                }&#10;            }&#10;            return countSize;&#10;        }&#10;&#10;        @Override&#10;        public Set&lt;E&gt; toSet() {&#10;            List&lt;E&gt; listSet = new ArrayList&lt;&gt;(this.map.keySet());&#10;            int l = listSet.size();&#10;            for(int j=l-1; j&gt;=0; j--){&#10;                E e = listSet.get(j);&#10;                if(this.getMultiplicity(e)==0){&#10;                    map.remove(e);&#10;                }&#10;            }&#10;&#10;            return this.map.keySet();&#10;        }&#10;&#10;        @Override&#10;        public String toString(){&#10;&#10;            return this.map.entrySet().toString();&#10;        }&#10;&#10;    }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1563030744000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Sometimes it's useful to read data from a file and write the result to another file.&lt;/p&gt;&#10;&#10;&lt;p&gt;Implement parsing of two more arguments: &lt;code&gt;-inputFile&lt;/code&gt;Â and &lt;code&gt;-outputFile&lt;/code&gt;.&lt;br&gt;&#10;  If the &lt;code&gt;-inputFile&lt;/code&gt;Â argument is provided, read input data from the file with the given name.&lt;br&gt;&#10;  If the &lt;code&gt;-outputFile&lt;/code&gt;Â argument is provided, only print info messages to the console (like errors parsing arguments).&lt;br&gt;&#10;  Print the results to the file.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Run configuration examples&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;java SortingTool -sortingType byCount -inputFile input.txt&lt;/code&gt;&#10;&lt;code&gt;java SortingTool -sortingType byCount -inputFile data.dat -outputFile out.txt&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/45/stages/244/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5386" />
                      <option name="index" value="6" />
                      <option name="name" value="X-files" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="test/SortingTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/SortingTest.java" />
                                <option name="text" value="import common.SortingToolStage6Test;&#10;&#10;public class SortingTest extends SortingToolStage6Test {&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/common/SortingToolStage6Test.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/common/SortingToolStage6Test.kt" />
                                <option name="text" value="package common&#10;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest&#10;import org.hyperskill.hstest.v5.testcase.CheckResult&#10;import org.hyperskill.hstest.v5.testcase.TestCase&#10;import sorting.Main&#10;import java.io.File&#10;import java.util.*&#10;&#10;abstract class SortingToolStage6Test : BaseStageTest&lt;SortingToolClue&gt;(Main::class.java) {&#10;&#10;    override fun generate(): List&lt;TestCase&lt;SortingToolClue&gt;&gt; {&#10;        return stage4Tests() + stage5Tests() + stage6Tests()&#10;    }&#10;&#10;    override fun check(reply: String, clue: SortingToolClue): CheckResult {&#10;        @Suppress(&quot;NAME_SHADOWING&quot;) var reply = reply&#10;&#10;        val fileNameArgIdx = clue.args.indexOf(&quot;-outputFile&quot;)&#10;&#10;        if (fileNameArgIdx != -1) {&#10;            val fileName = clue.args[fileNameArgIdx + 1]&#10;&#10;            reply = File(fileName).readText()&#10;        }&#10;&#10;        return when {&#10;            badArgs(clue.args) -&gt; CheckResult(true)  // TODO: test something here&#10;            &quot;byCount&quot; in clue.args -&gt; checkByCount(reply, clue)&#10;            else -&gt; checkNatural(reply, clue)&#10;        }&#10;    }&#10;&#10;    private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {&#10;        return when {&#10;            &quot;long&quot; in clue.args -&gt; checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)&#10;            &quot;word&quot; in clue.args -&gt; checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)&#10;            &quot;line&quot; in clue.args -&gt; checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)&#10;&#10;            else -&gt; throw IllegalArgumentException(&quot;Bad test: no data type found&quot;)&#10;        }&#10;    }&#10;&#10;    private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {&#10;        return when {&#10;            &quot;long&quot; in clue.args -&gt; checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)&#10;            &quot;word&quot; in clue.args -&gt; checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)&#10;            &quot;line&quot; in clue.args -&gt; checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)&#10;&#10;            else -&gt; throw IllegalArgumentException(&quot;Bad test: no data type found&quot;)&#10;        }&#10;    }&#10;&#10;    private fun badArgs(args: List&lt;String&gt;): Boolean {&#10;        val unknownArgs =&#10;                args.toSet() - setOf(&quot;-dataType&quot;, &quot;-sortingType&quot;, &quot;long&quot;, &quot;word&quot;, &quot;line&quot;, &quot;natural&quot;, &quot;byCount&quot;)&#10;&#10;        if (unknownArgs.isNotEmpty()) {&#10;            return true&#10;        }&#10;&#10;        if (args.last() == &quot;-dataType&quot; || args.last() == &quot;-sortingType&quot;) {&#10;            return true&#10;        }&#10;&#10;        return false&#10;    }&#10;}&#10;&#10;private fun fileTestCase(&#10;        input: String,&#10;        revealTest: Boolean,&#10;        file: String,&#10;        vararg args: String = arrayOf(&quot;-dataType&quot;, &quot;long&quot;)&#10;): TestCase&lt;SortingToolClue&gt; {&#10;    return TestCase&lt;SortingToolClue&gt;()&#10;            .setAttach(SortingToolClue(input, revealTest, args.toList()))&#10;            .addArguments(*args)&#10;            .addFile(file, input)&#10;}&#10;&#10;fun stage4Tests(): List&lt;TestCase&lt;SortingToolClue&gt;&gt; {&#10;    return listOf(&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-dataType&quot;, &quot;long&quot;, &quot;-sortingType&quot;, &quot;natural&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-dataType&quot;, &quot;long&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-dataType&quot;, &quot;long&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-dataType&quot;, &quot;word&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-dataType&quot;, &quot;line&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1111 1111&#10;                |22222&#10;                |3&#10;                |44&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    false,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-dataType&quot;, &quot;line&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1111 1111&#10;                |22222&#10;                |3&#10;                |44&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    false,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-dataType&quot;, &quot;word&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1111 1111&#10;                |22222&#10;                |3&#10;                |44&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    false,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-dataType&quot;, &quot;long&quot;&#10;            )&#10;    )&#10;}&#10;&#10;fun stage5Tests(): List&lt;TestCase&lt;SortingToolClue&gt;&gt; {&#10;    return listOf(&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-sortingType&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-dataType&quot;, &quot;long&quot;, &quot;-abc&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1111 1111&#10;                |22222&#10;                |3&#10;                |44&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    false,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-dataType&quot;, &quot;line&quot;, &quot;-cde&quot;&#10;            ),&#10;            createTest(&#10;                    &quot;&quot;&quot;&#10;                |1111 1111&#10;                |22222&#10;                |3&#10;                |44&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    false,&#10;                    &quot;-dataType&quot;, &quot;line&quot;, &quot;-sortingType&quot;&#10;            )&#10;    )&#10;}&#10;&#10;fun stage6Tests(): List&lt;TestCase&lt;SortingToolClue&gt;&gt; {&#10;    return listOf(&#10;            fileTestCase(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;input.txt&quot;,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-inputFile&quot;, &quot;input.txt&quot;&#10;            ),&#10;            fileTestCase(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    true,&#10;                    &quot;data.dat&quot;,&#10;                    &quot;-sortingType&quot;, &quot;byCount&quot;, &quot;-inputFile&quot;, &quot;data.dat&quot;, &quot;-outputFile&quot;, &quot;out.txt&quot;&#10;            ),&#10;            fileTestCase(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    false,&#10;                    &quot;input.txt&quot;,&#10;                    &quot;-sortingType&quot;, &quot;natural&quot;, &quot;-inputFile&quot;, &quot;input.txt&quot;&#10;            ),&#10;            fileTestCase(&#10;                    &quot;&quot;&quot;&#10;                |1 -2   333 4&#10;                |42&#10;                |1                 1&#10;                &quot;&quot;&quot;.trimMargin(),&#10;                    false,&#10;                    &quot;data.dat&quot;,&#10;                    &quot;-sortingType&quot;, &quot;natural&quot;, &quot;-inputFile&quot;, &quot;data.dat&quot;, &quot;-outputFile&quot;, &quot;out.txt&quot;&#10;            )&#10;    )&#10;}&#10;&#10;&#10;fun revealRawTest(clue: SortingToolClue, reply: String): String {&#10;    return with(clue) { &quot;Args:\n${args.joinToString(&quot; &quot;)}\nInput:\n$consoleInput\nYour output:\n$reply\n\n&quot; }&#10;}&#10;&#10;class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List&lt;String&gt;)&#10;&#10;fun createTest(&#10;        consoleInput: String,&#10;        revealTest: Boolean,&#10;        vararg args: String = arrayOf(&quot;-dataType&quot;, &quot;long&quot;)&#10;): TestCase&lt;SortingToolClue&gt; {&#10;    return TestCase&lt;SortingToolClue&gt;()&#10;            .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))&#10;            .setInput(consoleInput)&#10;            .addArguments(*args)&#10;}&#10;&#10;fun parseLongTokens(input: String): List&lt;Int&gt; {&#10;    val scanner = Scanner(input)&#10;&#10;    val longTokens = mutableListOf&lt;Int&gt;()&#10;&#10;    while (scanner.hasNextInt()) {&#10;        longTokens.add(scanner.nextInt())&#10;    }&#10;&#10;    return longTokens&#10;}&#10;&#10;fun parseWordTokens(input: String): List&lt;String&gt; {&#10;    val scanner = Scanner(input)&#10;&#10;    val wordTokens = mutableListOf&lt;String&gt;()&#10;&#10;    while (scanner.hasNext()) {&#10;        wordTokens.add(scanner.next())&#10;    }&#10;&#10;    return wordTokens&#10;}&#10;&#10;&#10;fun parseLineTokens(input: String): List&lt;String&gt; {&#10;    return input.lines()&#10;}&#10;&#10;&#10;fun &lt;TokenType : Comparable&lt;TokenType&gt;&gt; checkNatural(&#10;        actualTokens: List&lt;TokenType&gt;,&#10;        sortedTokensParser: (String) -&gt; List&lt;TokenType&gt;,&#10;        clue: SortingToolClue,&#10;        reply_: String&#10;): CheckResult {&#10;    val reply = reply_.trim()&#10;    val lines = reply.lines()&#10;&#10;    if (lines.size != 2) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Can't parse your output: expected 2 lines.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Can't parse your output: expected 2 lines.&quot;)&#10;        }&#10;    }&#10;&#10;    val totalRegex = &quot;&quot;&quot;(\d+)&quot;&quot;&quot;.toRegex()&#10;    val totalMatchResult = totalRegex.find(lines[0])&#10;    if (totalMatchResult == null) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Can't find number in the first line of your output.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Can't find number in the first line of your output.&quot;)&#10;        }&#10;    }&#10;&#10;    val totalTokens = totalMatchResult.groupValues[1].toInt()&#10;&#10;    val actualTotal = actualTokens.size&#10;&#10;    if (actualTotal != totalTokens) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Total tokens are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val sortedActualTokens = actualTokens.sorted()&#10;&#10;    val sortedTokens = sortedTokensParser(lines[1].substringAfter(&quot;:&quot;).dropWhile { it in setOf('\n', '\r') })&#10;&#10;    val total = sortedTokens.size&#10;&#10;    if (actualTotal != total) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Total sorted tokens are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    if (sortedActualTokens != sortedTokens) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Sorted tokens are incorrect.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Sorted tokens are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    return CheckResult(true)&#10;}&#10;&#10;&#10;fun &lt;TokenType : Comparable&lt;TokenType&gt;&gt; checkByCount(&#10;        actualTokens: List&lt;TokenType&gt;,&#10;        tokenParser: (String) -&gt; TokenType,&#10;        clue: SortingToolClue,&#10;        reply_: String&#10;): CheckResult {&#10;    val reply = reply_.trim()&#10;    val lines = reply.lines()&#10;&#10;    val totalRegex = &quot;&quot;&quot;(\d+)&quot;&quot;&quot;.toRegex()&#10;    val totalMatchResult = totalRegex.find(lines[0])&#10;    if (totalMatchResult == null) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Can't find number in the first line of your output.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Can't find number in the first line of your output.&quot;)&#10;        }&#10;    }&#10;&#10;    val totalTokens = totalMatchResult.groupValues[1].toInt()&#10;&#10;    val actualTotal = actualTokens.size&#10;&#10;    if (actualTotal != totalTokens) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Total tokens are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    val tokenToCount = mutableMapOf&lt;TokenType, Int&gt;()&#10;&#10;    for (token in actualTokens) {&#10;        tokenToCount[token] = (tokenToCount[token] ?: 0) + 1&#10;    }&#10;&#10;    val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))&#10;    val linesWithTokens = lines.drop(1)&#10;&#10;    if (actualSortedByCount.size != linesWithTokens.size) {&#10;        return if (clue.revealTest) {&#10;            CheckResult(&#10;                    false,&#10;                    &quot;Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n&quot; +&#10;                            revealRawTest(clue, reply)&#10;            )&#10;        } else {&#10;            CheckResult(false, &quot;Lines with tokens are incorrect.&quot;)&#10;        }&#10;    }&#10;&#10;    for ((lineId, line) in linesWithTokens.withIndex()) {&#10;        val token = tokenParser(line.substringBefore(':'))&#10;        val info = line.substringAfter(':')&#10;&#10;        val (actualToken, actualTimes) = actualSortedByCount[lineId]&#10;&#10;        if (token != actualToken) {&#10;            return if (clue.revealTest) {&#10;                CheckResult(&#10;                        false,&#10;                        &quot;Token ($token) is incorrect. Expected: $actualToken.\n&quot; +&#10;                                revealRawTest(clue, reply)&#10;                )&#10;            } else {&#10;                CheckResult(false, &quot;Token is incorrect.&quot;)&#10;            }&#10;        }&#10;&#10;        // TODO: check info (times and percentage)&#10;    }&#10;&#10;    return CheckResult(true)&#10;}&#10;&#10;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/sorting/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/sorting/Main.java" />
                                <option name="text" value="package sorting;&#10;&#10;import java.util.*;&#10;&#10;public class Main {&#10;    public static void main(final String[] args) {&#10;        Scanner scanner = new Scanner(System.in);&#10;&#10;        while (scanner.hasNextLong()) {&#10;            long number = scanner.nextLong();&#10;            // write your code here&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/sorting/Multiset.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/sorting/Multiset.java" />
                                <option name="text" value="package sorting;&#10;&#10;import java.util.Set;&#10;&#10;interface Multiset&lt;E&gt; {&#10;&#10;    /**&#10;     * Add an element to the multiset.&#10;     * It increases the multiplicity of the element by 1.&#10;     */&#10;    void add(E elem);&#10;&#10;    /**&#10;     * Remove an element from the multiset.&#10;     * It decreases the multiplicity of the element by 1.&#10;     */&#10;    void remove(E elem);&#10;&#10;    /**&#10;     * Union this multiset with another one. The result is the modified multiset (this).&#10;     * It will contain all elements that are present in at least one of the initial multisets.&#10;     * The multiplicity of each element is equal to the maximum multiplicity of&#10;     * the corresponding elements in both multisets.&#10;     */&#10;    void union(Multiset&lt;E&gt; other);&#10;&#10;    /**&#10;     * Intersect this multiset with another one. The result is the modified multiset (this).&#10;     * It will contain all elements that are present in the both multisets.&#10;     * The multiplicity of each element is equal to the minimum multiplicity of&#10;     * the corresponding elements in the intersecting multisets.&#10;     */&#10;    void intersect(Multiset&lt;E&gt; other);&#10;&#10;    /**&#10;     * Returns multiplicity of the given element.&#10;     * If the set doesn't contain it, the multiplicity is 0&#10;     */&#10;    int getMultiplicity(E elem);&#10;&#10;    /**&#10;     * Check the multiset contains an element,&#10;     * i.e. the multiplicity &gt; 0&#10;     */&#10;    boolean contains(E elem);&#10;&#10;    /**&#10;     * The number of unique elements&#10;     */&#10;    int numberOfUniqueElements();&#10;&#10;    /**&#10;     * The size of the multiset, including repeated elements&#10;     */&#10;    int size();&#10;&#10;    /**&#10;     * The set of unique elements (without repeating)&#10;     */&#10;    Set&lt;E&gt; toSet();&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/sorting/TreeMultiset.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/sorting/TreeMultiset.java" />
                                <option name="text" value="package sorting;&#10;&#10;import java.util.*;&#10;&#10;public class TreeMultiset &lt;E&gt; implements Multiset&lt;E&gt; {&#10;&#10;&#10;        private Map&lt;E, Integer&gt; map = new TreeMap&lt;&gt;();&#10;&#10;        public Map&lt;E, Integer&gt; getMap(){&#10;            return this.map;&#10;        }&#10;&#10;        @Override&#10;        public void add(E elem) {&#10;&#10;            int newVal = null != map.get(elem) ? map.getOrDefault(elem, 0) : 0;&#10;            //if(newVal&gt;1){&#10;            map.put(elem, newVal+1);&#10;            //}&#10;        }&#10;&#10;        @Override&#10;        public void remove(E elem) {&#10;            if(this.contains(elem)){&#10;                int currentVal=map.get(elem);&#10;                map.put(elem, currentVal-1);&#10;            }&#10;            if(this.getMultiplicity(elem) == 0){&#10;                this.map.remove(elem);&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void union(Multiset&lt;E&gt; other) {&#10;            for(E o: other.toSet()){&#10;                int oVal = other.getMultiplicity(o);&#10;                if(this.contains(o)){&#10;                    int thisVal = this.getMultiplicity(o);&#10;                    map.put(o, Math.max(thisVal, oVal));&#10;                }else{&#10;                    map.put(o, oVal);&#10;                }&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void intersect(Multiset&lt;E&gt; other) {&#10;            int l = this.toSet().size();&#10;            List&lt;E&gt; listSet = new ArrayList&lt;&gt;(this.toSet());&#10;            for(int j=l-1; j&gt;=0; j--){&#10;                E e = listSet.get(j);&#10;                if (!other.contains(e)){&#10;                    map.remove(e);&#10;                }else{&#10;                    int thisVal = this.getMultiplicity(e);&#10;                    int oVal = other.getMultiplicity(e);&#10;                    map.put(e, Math.min(thisVal, oVal));&#10;                }&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public int getMultiplicity(E elem) {&#10;            return null != map.get(elem) ? map.getOrDefault(elem, 0) : 0;&#10;        }&#10;&#10;        @Override&#10;        public boolean contains(E elem) {&#10;            return this.getMultiplicity(elem) &gt; 0;&#10;        }&#10;&#10;        @Override&#10;        public int numberOfUniqueElements() {&#10;            int count =0;&#10;            for(E o:this.toSet()){&#10;                if( this.getMultiplicity(o) == 1){&#10;                    count++;&#10;                }&#10;            }&#10;            return count&lt;=this.size() ? count : 0;&#10;        }&#10;&#10;        @Override&#10;        public int size() {&#10;            int countSize =0;&#10;            for(E o:this.toSet()){&#10;                int currentVal = this.getMultiplicity(o);&#10;                if(currentVal&gt;0) {&#10;                    countSize += currentVal;&#10;                }&#10;            }&#10;            return countSize;&#10;        }&#10;&#10;        @Override&#10;        public Set&lt;E&gt; toSet() {&#10;            List&lt;E&gt; listSet = new ArrayList&lt;&gt;(this.map.keySet());&#10;            int l = listSet.size();&#10;            for(int j=l-1; j&gt;=0; j--){&#10;                E e = listSet.get(j);&#10;                if(this.getMultiplicity(e)==0){&#10;                    map.remove(e);&#10;                }&#10;            }&#10;&#10;            return this.map.keySet();&#10;        }&#10;&#10;        @Override&#10;        public String toString(){&#10;&#10;            return this.map.entrySet().toString();&#10;        }&#10;&#10;    }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="out.txt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="out.txt" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1563030678000" />
                    </EduTask>
                  </list>
                </option>
              </FrameworkLesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="2" />
                <option name="name" value="Problems" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Creating a set&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2330&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;&lt;span&gt;Create TreeSet by name &lt;/span&gt;&lt;span style=&quot;color: #ff4363;&quot;&gt;set&lt;/span&gt;&lt;span&gt; in any way known to you and fill it with the following three strings &lt;/span&gt;&lt;span style=&quot;color: #64b0f4;&quot;&gt;&quot;Gamma&quot;, &lt;span style=&quot;color: #64b0f4;&quot;&gt;&quot;Alpha&quot;&lt;/span&gt;, &quot;Omega&quot;&lt;/span&gt; .&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;The code for displaying the set is already written.&lt;b&gt;&lt;/b&gt;&lt;/p&gt; &#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;[Alpha, Gamma, Omega]&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3575&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2330" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2330" />
                      <option name="index" value="1" />
                      <option name="name" value="Creating a set" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.*;&#10;&#10;public class Main {&#10;&#10;    public static void main(String[] args) {&#10;&#10;        //write your code here&#10;&#10;        System.out.println(set);&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1553865998000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Removing duplicates and sorting&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2771&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;&lt;span&gt;Write a program that reads a sequence of strings from the standard input and displays them in a lexicographic order without duplicates.&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;Try to write your solution using a set.&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Input data format&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;The first line contains the size of a string sequence. Next lines contain strings.&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Output data format&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;A sorted sequence of strings without duplicates. Each string must be in a new line.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;6&lt;br&gt;postgres&lt;br&gt;sqlite&lt;br&gt;oracle&lt;br&gt;mongodb&lt;br&gt;postgres&lt;br&gt;mssql&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;mongodb&lt;br&gt;mssql&lt;br&gt;oracle&lt;br&gt;postgres&lt;br&gt;sqlite&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;5&lt;br&gt;1&lt;br&gt;2&lt;br&gt;2&lt;br&gt;11&lt;br&gt;20&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;1&lt;br&gt;11&lt;br&gt;2&lt;br&gt;20&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3575&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2771" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2771" />
                      <option name="index" value="2" />
                      <option name="name" value="Removing duplicates and sorting" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Main {&#10;    public static void main(String[] args) {&#10;        // put your code here&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088467000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Symmetric difference&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2333&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;&lt;span&gt;Implement a method for finding the symmetric difference of two given sets. Elements in the resulting set can be in any order.&lt;/span&gt;&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;An example&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;The symmetric difference of two sets {1, 2, 3} and {0, 1, 2} is {0, 3}&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1 2 3&lt;br&gt;0 1 2&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;0 3&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3575&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2333" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2333" />
                      <option name="index" value="3" />
                      <option name="name" value="Symmetric difference" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.*;&#10;&#10;class SetUtils {&#10;&#10;    /**&#10;     * @return symmetric difference between set1 and set2&#10;     */&#10;    public static &lt;T&gt; Set&lt;T&gt; symmetricDifference(Set&lt;? extends T&gt; set1, Set&lt;? extends T&gt; set2) {&#10;        // write your code here&#10;    }&#10;&#10;}&#10;&#10;/* Do not change code below */&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        Scanner scanner = new Scanner(System.in);&#10;        String strSet1 = scanner.nextLine();&#10;        String strSet2 = scanner.nextLine();&#10;        Set&lt;String&gt; set1 = new HashSet&lt;&gt;();&#10;        Set&lt;String&gt; set2 = new HashSet&lt;&gt;();&#10;        if (!strSet1.equals(&quot;empty&quot;)){&#10;            Collections.addAll(set1, strSet1.split(&quot; &quot;));&#10;        }&#10;        if (!strSet2.equals(&quot;empty&quot;)){&#10;            Collections.addAll(set2, strSet2.split(&quot; &quot;));&#10;        }&#10;        Set&lt;String&gt; resultSet = SetUtils.symmetricDifference(set1, set2);&#10;        resultSet.forEach(e -&gt; System.out.print(e + &quot; &quot;));&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088434000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Displaying pairs&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2346&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;div&gt;&#10;   &lt;span&gt;The map is given. &lt;/span&gt;&#10;   &lt;span&gt;Output each its key-value pair in the loop with a new line.&lt;/span&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;div&gt;&#10;    &lt;br&gt;&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    Each line must be in form of &#10;    &lt;b&gt;key=value&lt;/b&gt; (for example, Gamma=3)&#10;   &lt;/div&gt;&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Alpha=1&lt;br&gt;Gamma=3&lt;br&gt;Omega=24&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3558&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2346" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2346" />
                      <option name="index" value="4" />
                      <option name="name" value="Displaying pairs" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.*;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        Map&lt;String, Integer&gt; map = new TreeMap&lt;&gt;();&#10;        map.put(&quot;Gamma&quot;,  3);&#10;        map.put(&quot;Omega&quot;, 24);&#10;        map.put(&quot;Alpha&quot;,  1);&#10;&#10;        //write your code here    &#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1555340296000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Processing maps - 2&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2349&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;div&gt;&#10;   &lt;span&gt;Modify and return the given map as follows: &lt;/span&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;ul&gt;&#10;    &lt;li&gt;if the first key % 2 != 0 return sub-map from First Key inclusive to FirstKey+4 inclusive in descending order&lt;br&gt;&lt;/li&gt;&#10;    &lt;li&gt;else return sub-map from LastKey-4 inclusive to the Last Key inclusive in descending order&lt;br&gt;&lt;/li&gt;&#10;   &lt;/ul&gt;&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1:one 2:two 3:three 4:four 5:five 6:six 7:seven&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;5 : five&lt;br&gt;4 : four&lt;br&gt;3 : three&lt;br&gt;2 : two&lt;br&gt;1 : one&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;2:two 4:four 6:six 8:eight 10:ten 12:twelve 14:fourteen&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;14 : fourteen&lt;br&gt;12 : twelve&lt;br&gt;10 : ten&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3558&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2349" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2349" />
                      <option name="index" value="5" />
                      <option name="name" value="Processing maps - 2" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.*;&#10;&#10;class MapUtils {&#10;&#10;    public static NavigableMap&lt;Integer, String&gt; getSubMap(NavigableMap&lt;Integer, String&gt; map){&#10;        // write your code here&#10;    }&#10;&#10;}&#10;&#10;/* Do not modify code below */&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        Scanner scanner = new Scanner(System.in);&#10;        TreeMap&lt;Integer, String&gt; map = new TreeMap&lt;&gt;();&#10;        Arrays.stream(scanner.nextLine().split(&quot;\\s&quot;)).forEach(s -&gt; {&#10;            String[] pair = s.split(&quot;:&quot;);&#10;            map.put(Integer.parseInt(pair[0]),pair[1]);&#10;        });&#10;        NavigableMap&lt;Integer, String&gt; res = MapUtils.getSubMap(map);&#10;        res.forEach((k, v) -&gt; System.out.println(k + &quot; : &quot; + v));&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088435000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Multiset&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2484&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;&lt;span&gt;A &lt;/span&gt;&lt;b&gt;multiset&lt;/b&gt;&lt;span&gt; is a generalization of the concept of a set. Unlike sets, it can store duplicate elements. The number of instances of an element is the &lt;/span&gt;&lt;b&gt;multiplicity.&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;For example, given the following multiset:&lt;br&gt;&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;{a, a, b, b, b, c}&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;The multiplicity of &lt;b&gt;a&lt;/b&gt; is 2, the multiplicity of &lt;b&gt;b&lt;/b&gt; is 3, the multiplicity of &lt;b&gt;c&lt;/b&gt; is 1. If a multiset does not have an element, the multiplicity of it is 0.&lt;/p&gt;&#10;  &lt;div&gt;&#10;   Write an implementation of the provided generic interface &#10;   &lt;b&gt;Multiset&lt;/b&gt;. The template for your generic class named &#10;   &lt;b&gt;HashMultiset&lt;/b&gt; is given as well. You should implement all methods of the class, according to its interface. You also can add additional methods for helping.&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   Read the given interface to understand the common multiset operations (add, remove, union, intersection and so one).&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   Do not forget to test your class. If your implementation is not correct, the testing system gives you a hint throwing an exception with a text, like:&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Exception in thread &quot;main&quot; java.lang.AssertionError: size() returned an incorrect result&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;p&gt;When you pass your solution to the submit form, do not remove the interface and do not make it and the class public.&lt;br&gt;&lt;/p&gt;&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3558&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2484" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2484" />
                      <option name="index" value="6" />
                      <option name="name" value="Multiset" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="interface Multiset&lt;E&gt; {&#10;&#10;    /**&#10;     * Add an element to the multiset.&#10;     * It increases the multiplicity of the element by 1.&#10;     */&#10;    void add(E elem);&#10;&#10;    /**&#10;     * Remove an element from the multiset.&#10;     * It decreases the multiplicity of the element by 1.&#10;     */&#10;    void remove(E elem);&#10;&#10;    /**&#10;     * Union this multiset with another one. The result is the modified multiset (this).&#10;     * It will contain all elements that are present in at least one of the initial multisets.&#10;     * The multiplicity of each element is equal to the maximum multiplicity of&#10;     * the corresponding elements in both multisets.&#10;     */&#10;    void union(Multiset&lt;E&gt; other);&#10;&#10;    /**&#10;     * Intersect this multiset with another one. The result is the modified multiset (this).&#10;     * It will contain all elements that are present in the both multisets.&#10;     * The multiplicity of each element is equal to the minimum multiplicity of&#10;     * the corresponding elements in the intersecting multisets.&#10;     */&#10;    void intersect(Multiset&lt;E&gt; other);&#10;&#10;    /**&#10;     * Returns multiplicity of the given element.&#10;     * If the set doesn't contain it, the multiplicity is 0&#10;     */&#10;    int getMultiplicity(E elem);&#10;&#10;    /**&#10;     * Check the multiset contains an element,&#10;     * i.e. the multiplicity &gt; 0&#10;     */&#10;    boolean contains(E elem);&#10;&#10;    /**&#10;     * The number of unique elements&#10;     */&#10;    int numberOfUniqueElements();&#10;&#10;    /**&#10;     * The size of the multiset, including repeated elements&#10;     */&#10;    int size();&#10;&#10;    /**&#10;     * The set of unique elements (without repeating)&#10;     */&#10;    Set&lt;E&gt; toSet();&#10;}&#10;&#10;class HashMultiset&lt;E&gt; implements Multiset&lt;E&gt; {&#10;&#10;    private Map&lt;E, Integer&gt; map = new HashMap&lt;&gt;();&#10;&#10;    @Override&#10;    public void add(E elem) {&#10;        // implement the method&#10;    }&#10;&#10;    @Override&#10;    public void remove(E elem) {&#10;        // implement the method&#10;    }&#10;&#10;    @Override&#10;    public void union(Multiset&lt;E&gt; other) {&#10;        // implement the method&#10;    }&#10;&#10;    @Override&#10;    public void intersect(Multiset&lt;E&gt; other) {&#10;        // implement the method&#10;    }&#10;&#10;    @Override&#10;    public int getMultiplicity(E elem) {&#10;        // implement the method&#10;        return 0;&#10;    }&#10;&#10;    @Override&#10;    public boolean contains(E elem) {&#10;        // implement the method&#10;        return false;&#10;    }&#10;&#10;    @Override&#10;    public int numberOfUniqueElements() {&#10;        // implement the method&#10;        return 0;&#10;    }&#10;&#10;    @Override&#10;    public int size() {&#10;        // implement the method&#10;        return 0;&#10;    }&#10;&#10;    @Override&#10;    public Set&lt;E&gt; toSet() {&#10;        // implement the method&#10;        return map.keySet();&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088452000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Spell checker&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2351&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;&lt;span&gt;The simplest spell checker is based on a list of known words. Every word in the checked text is searched for in this list and, if such a word was not found, it is marked as erroneous.&lt;/span&gt;&lt;br&gt;&lt;/p&gt; &#10;  &lt;p&gt;Write this spell checker.&lt;/p&gt; &#10;  &lt;p&gt;The first line of the input contains &lt;span class=&quot;math-tex&quot;&gt;\( d \)&lt;/span&gt; â€“ number of records in the list of known word. Next go &lt;span class=&quot;math-tex&quot;&gt;\( d \)&lt;/span&gt; lines contain one known word per line, next â€” the number &lt;span class=&quot;math-tex&quot;&gt;\( l \)&lt;/span&gt; of lines of the text, after which â€” &lt;span class=&quot;math-tex&quot;&gt;\( l \)&lt;/span&gt; lines of the text.&lt;/p&gt; &#10;  &lt;p&gt;Write a program that outputs those words from the text, which are not found in the dictionary (i.e. erroneous). Your spell checker should be case insensitive. The words are entered in an arbitrary order. Words, which are not found in the dictionary, should not be duplicated in the output.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;3&lt;br&gt;a&lt;br&gt;bb&lt;br&gt;cCc&lt;br&gt;2&lt;br&gt;a bb aab aba ccc&lt;br&gt;c bb aaa&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;c&lt;br&gt;aab&lt;br&gt;aaa&lt;br&gt;aba&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3558&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2351" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2351" />
                      <option name="index" value="7" />
                      <option name="name" value="Spell checker" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Main {&#10;    public static void main(String[] args) {&#10;        // put your code here&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088445000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Convert vehicles and cars to string&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/3004&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;div&gt;&#10;   &lt;div&gt;&#10;    &lt;div&gt;&#10;     &lt;div&gt;&#10;      Given two classes &#10;      &lt;code class=&quot;java&quot;&gt;Vehicle&lt;/code&gt; and &#10;      &lt;code class=&quot;java&quot;&gt;Car&lt;/code&gt;. The second class extends the first one.&#10;      &lt;div&gt;&#10;       &lt;br&gt;&#10;      &lt;/div&gt;&#10;      &lt;div&gt;&#10;       Override &#10;       &lt;code class=&quot;java&quot;&gt;toString&lt;/code&gt; in both classes to return string representation of vehicles and cars.&#10;       &lt;br&gt;&#10;       &lt;br&gt;If an object is &#10;       &lt;code class=&quot;java&quot;&gt;Vehicle&lt;/code&gt;, the overridden method &#10;       &lt;code class=&quot;java&quot;&gt;toString&lt;/code&gt; must return something like:&#10;      &lt;/div&gt;&#10;      &lt;div&gt;&#10;       &lt;br&gt;&#10;      &lt;/div&gt;&#10;      &lt;div&gt;&#10;       &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Vehicle{licensePlate=ABC123}&lt;/code&gt;&lt;/pre&gt;&#10;       &lt;br&gt;&#10;       &lt;div&gt;&#10;        &lt;div&gt;&#10;         If an object is &#10;         &lt;code class=&quot;java&quot;&gt;Car&lt;/code&gt;, the overridden method &#10;         &lt;code class=&quot;java&quot;&gt;toString&lt;/code&gt; must return something like:&#10;        &lt;/div&gt;&#10;        &lt;div&gt;&#10;         &lt;br&gt;&#10;        &lt;/div&gt;&#10;        &lt;div&gt;&#10;         &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Car{licensePlate=ABC123,numberOfSeats=4}&lt;/code&gt;&lt;/pre&gt;&#10;        &lt;/div&gt;&#10;       &lt;/div&gt;&#10;      &lt;/div&gt;&#10;     &lt;/div&gt;&#10;    &lt;/div&gt;&#10;   &lt;/div&gt;&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3584&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/3004" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="3004" />
                      <option name="index" value="8" />
                      <option name="name" value="Convert vehicles and cars to string" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Vehicle {&#10;&#10;    protected String licensePlate;&#10;&#10;    public Vehicle(String licensePlate) {&#10;        this.licensePlate = licensePlate;&#10;    }&#10;}&#10;&#10;class Car extends Vehicle {&#10;&#10;    protected int numberOfSeats;&#10;&#10;    public Car(String licensePlate, int numberOfSeats) {&#10;        super(licensePlate);&#10;        this.numberOfSeats = numberOfSeats;&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088481000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Account&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2308&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;There is a class named Account. It includes three fields: &lt;code class=&quot;java&quot;&gt;id&lt;/code&gt;, &lt;code class=&quot;java&quot;&gt;code&lt;/code&gt; and &lt;code class=&quot;java&quot;&gt;balance&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;Override the method &lt;code class=&quot;java&quot;&gt;toString()&lt;/code&gt; in this class. The method should return a string representation of the account instance.&lt;/p&gt;&#10;  &lt;p&gt;Do not make the class &lt;code class=&quot;java&quot;&gt;public&lt;/code&gt;.&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Account{id=10, code='123-456-789', balance=2000}&lt;/code&gt;&lt;/pre&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3584&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2308" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2308" />
                      <option name="index" value="9" />
                      <option name="name" value="Account" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.Scanner;&#10;&#10;class Account {&#10;&#10;    private long id;&#10;    private String code;&#10;    private Long balance;&#10;&#10;    public Account(long id, String code, Long balance) {&#10;        this.id = id;&#10;        this.code = code;&#10;        this.balance = balance;&#10;    }&#10;&#10;    // Override toString() here&#10;}&#10;&#10;/* Do not change code below */&#10;public class Main {&#10;&#10;    public static void main(String[] args) {&#10;&#10;        Scanner scanner = new Scanner(System.in);&#10;&#10;        String[] parts = scanner.nextLine().split(&quot;\\s+&quot;);&#10;&#10;        long id = Long.parseLong(parts[0]);&#10;        String code = parts[1];&#10;        long balance = Long.parseLong(parts[2]);&#10;&#10;        Object acc = new Account(id, code, balance);&#10;&#10;        System.out.println(acc.toString());&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088426000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Time as a string&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/3002&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  Given a class named &#10;  &lt;code class=&quot;java&quot;&gt;Time&lt;/code&gt;. It has three int fields: &#10;  &lt;code class=&quot;java&quot;&gt;hours&lt;/code&gt;, &#10;  &lt;code class=&quot;java&quot;&gt;minutes&lt;/code&gt; and &#10;  &lt;code class=&quot;java&quot;&gt;seconds&lt;/code&gt;. Override the method &#10;  &lt;code class=&quot;java&quot;&gt;toString&lt;/code&gt; in the class to return a string representation of an object.&#10;  &lt;div&gt;&#10;   &lt;div&gt;&#10;    &lt;br&gt;&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    The overridden method must return a string hours, minutes and seconds separated by colons. If a number contains only a single digit, add a zero first.&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    &lt;br&gt;&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    Here are some examples: &#10;    &lt;b&gt;&quot;23:59:59&quot;, &quot;11:08:05&quot;, &quot;01:01:01&quot;.&lt;/b&gt;&#10;   &lt;/div&gt;&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3584&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/3002" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="3002" />
                      <option name="index" value="10" />
                      <option name="name" value="Time as a string" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Time {&#10;&#10;    private int hours;&#10;    private int minutes;&#10;    private int seconds;&#10;&#10;    public Time(int hours, int minutes, int seconds) {&#10;        this.hours = hours;&#10;        this.minutes = minutes;&#10;        this.seconds = seconds;&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088480000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Who is who&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2207&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;&lt;span&gt;Given a class hierarchy consisting of three classes. The base class &lt;/span&gt;is &lt;code class=&quot;java&quot;&gt;Employee&lt;/code&gt;.&lt;span&gt; The first subclass &lt;/span&gt;is &lt;code class=&quot;java&quot;&gt;Developer&lt;/code&gt;,&lt;span&gt; the second subclass &lt;/span&gt;is &lt;code class=&quot;java&quot;&gt;DataAnalyst&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;Implement a method &lt;b&gt;determineWhoIsWho&lt;/b&gt;. The method takes an array of employees. Each element belongs to one of listed classes. The method should output the type (DEV, EMP or DA) of each element in a new line.&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;Use the provided template for your method.&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Output example&lt;/b&gt;&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;DEV&#10;EMP&#10;DA&lt;/code&gt;&lt;/pre&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3571&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2207" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2207" />
                      <option name="index" value="11" />
                      <option name="name" value="Who is who" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public static void determineWhoIsWho(Employee[] employees) {&#10;    for (Employee employee : employees) {&#10;        System.out.println(&quot;EMP&quot;);&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088425000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Sort out the classes&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/4340&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Given 4 classes - &lt;code class=&quot;java&quot;&gt;Shape&lt;/code&gt;, &lt;code class=&quot;java&quot;&gt;Polygon&lt;/code&gt;, &lt;code class=&quot;java&quot;&gt;Square&lt;/code&gt;, &lt;code class=&quot;java&quot;&gt;Circle&lt;/code&gt;.&lt;/p&gt;&#10;  &lt;p&gt;Classes &lt;code class=&quot;java&quot;&gt;Polygon&lt;/code&gt; and &lt;code class=&quot;java&quot;&gt;Circle&lt;/code&gt; both extends class &lt;code class=&quot;java&quot;&gt;Shape&lt;/code&gt;, class &lt;code class=&quot;java&quot;&gt;Square&lt;/code&gt; extends class &lt;code class=&quot;java&quot;&gt;Polygon&lt;/code&gt;. &lt;/p&gt;&#10;  &lt;p&gt;You need to implement a method that should take &lt;code class=&quot;java&quot;&gt;Shape&lt;/code&gt; array and add every element to one of the provided Lists based on their class.&lt;br&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;Solve the task!&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Good job!&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3571&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/4340" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="4340" />
                      <option name="index" value="12" />
                      <option name="name" value="Sort out the classes" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public static void sortShapes(Shape[] array,&#10;                              List&lt;Shape&gt; shapes,&#10;                              List&lt;Polygon&gt; polygons,&#10;                              List&lt;Square&gt; squares,&#10;                              List&lt;Circle&gt; circles) {&#10;    // write your code here&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088502000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Sum of the areas&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/4341&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  Given this classes:&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;class Shape {}&#10;class Square extends Shape {&#10;    private int side;&#10;    public int getSide() {&#10;        return side;&#10;    }&#10;    public void setSide(int side) {&#10;        this.side = side;&#10;    }&#10;}&#10;class Rectangle extends Shape {&#10;    private int width, height;&#10;    public int getWidth() {&#10;        return width;&#10;    }&#10;    public void setWidth(int width) {&#10;        this.width = width;&#10;    }&#10;    public int getHeight() {&#10;        return height;&#10;    }&#10;    public void setHeight(int height) {&#10;        this.height = height;&#10;    }&#10;}&lt;/code&gt;&lt;/pre&gt; &lt;/pre&gt;Unfortunately, the author of this classes forgot to add getArea() method to this classes. And now you need to implement a method that calculates a sum of areas of the Shape array. If some elements are instances of class Shape then their area equals 0.&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;4&lt;br&gt;Shape&lt;br&gt;Square 10&lt;br&gt;Square 20&lt;br&gt;Rectangle 20 3&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;560&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3571&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/4341" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="4341" />
                      <option name="index" value="13" />
                      <option name="name" value="Sum of the areas" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public static int sumOfAreas(Shape[] array) {&#10;    // write your code here&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088503000" />
                    </CodeTask>
                  </list>
                </option>
              </Lesson>
            </list>
          </option>
        </HyperskillCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>